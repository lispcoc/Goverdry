function townAction (key) {
  GenericVariable['ReturnAction'] = townAction
  if (key == undefined || key == null) {
    key = ''
    MP.SelectMode['selectF'] = 0
  }
  if (key.match(/^(none|start)$/)) {
    MP.SelectMode['selectF'] = 0
  }
  if (GameState.indexOf('Start') > -1) {
    MP.clearMainWindow()
    MP.clearTextSurface('all')
    key = ''
    MP.SelectMode['selectF'] = 0
    if (GameState == 'castleTownStart') {
      musicPlay('castleTown')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['CastleTown'],
        GraphicData['graphic/bg/castleTown']
      )
      MP.viewPartyStatus()
      GameState = 'castleTown'
    } else if (GameState == 'tavernStart') {
      musicPlay('tavern')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['Tavern'],
        GraphicData['graphic/bg/tavern']
      )
      MP.viewPartyStatus()
      GameState = 'tavern'
    } else if (GameState == 'innStart') {
      musicPlay('inn')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['Inn'],
        GraphicData['graphic/bg/inn']
      )
      MP.viewPartyStatus()
      GameState = 'inn'
    } else if (GameState == 'shopStart') {
      musicPlay('shop')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['Shop'],
        GraphicData['graphic/bg/shop']
      )
      MP.viewPartyStatus()
      GameState = 'shop'
    } else if (GameState == 'templeStart') {
      musicPlay('temple')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['Temple'],
        GraphicData['graphic/bg/temple']
      )
      MP.viewPartyStatus()
      GameState = 'temple'
    } else if (GameState == 'edgeOfTownStart') {
      musicPlay('edgeOfTown')
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['EdgeOfTown'],
        GraphicData['graphic/bg/edgeOfTown']
      )
      MP.viewPartyStatus()
      GameState = 'edgeOfTown'
    } else if (GameState == 'trainingStart') {
      musicPlay(GameData['TRAINING_MUSIC'])
      MP.drawFrame_Full_Title(
        MP.MainSurface,
        getDefaultMessage('TRAINING', 1, 24),
        GraphicData['graphic/bg/trainingGround']
      )
      MP.viewPartyStatus('clear')
      GameState = 'training'
    }
  }
  let value
  if (key == '' || key.match(/^(cancel|escape|start)$/)) {
    value = 0
  } else {
    value = MP.SelectMode['valueAry'][MP.SelectMode['select']]
  }
  let selAry = [],
    valueAry = [],
    colorAry = null
  let mode = 'normal',
    comment = ''
  let align = 'center',
    y = MP.LINE_HEIGHT,
    lineNum = 0,
    textAlign = 'left'
  if (GameState == 'castleTown') {
    if (key == 'cancel') {
      key = 'enter'
      value = 'edgeOfTown'
    }
    if (key == 'enter') {
      if (value == 'tavern') {
        saveData()
        GameState = 'tavernStart'
        townAction()
        return
      } else if (value == 'inn') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'castleTownStartReturn'
          return
        }
        saveData()
        GameState = 'innStart'
        townAction()
        return
      } else if (value == 'shop') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'castleTownStartReturn'
          return
        }
        saveData()
        GameState = 'shopStart'
        townAction()
        return
      } else if (value == 'temple') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'castleTownStartReturn'
          return
        }
        let inFlag = true
        let pt = PARTY[PlayData['ActiveParty']]
        let memberNum = pt.getMemberNum()
        for (let i = 0; i < memberNum; i++) {
          if (PC[pt.PartyMember[i]].State > 1) {
            inFlag = false
            break
          }
        }
        if (!inFlag) {
          GameState = 'castleTownStart'
          townAction()
          return
        }
        inFlag = false
        for (let i = 0; i < PlayData['PcMax']; i++) {
          let pcNum = PlayData['PcList'][i]
          if (templeCost(pcNum) >= 0 && PC[pcNum].PartyNum < 0) {
            inFlag = true
            break
          }
        }
        if (!inFlag) {
          GameState = 'castleTownStart'
          townAction()
          return
        }
        saveData()
        GameState = 'templeStart'
        townAction()
        return
      } else if (value == 'castle') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'castleTownStartReturn'
          return
        }
        TempVariable['castleEvent'] = ''
        if (GameData['CASTLE_EVENT'].length > 0) {
          for (let i = 0; i < GameData['CASTLE_EVENT'].length; i++) {
            let strAry = GameData['CASTLE_EVENT'][i].split('<>')
            if (checkCondition(strAry[1])) {
              TempVariable['castleEvent'] = GameData['CASTLE_EVENT'][i]
              break
            }
          }
        }
        if (TempVariable['castleEvent'] != '') {
          TempVariable['castleEventCG'] = []
          let str = TempVariable['castleEvent']
          let reg = new RegExp('<img *src="([^>]*?)".*?>')
          while (str.match(reg)) {
            TempVariable['castleEventCG'].push(RegExp.$1)
            str = str.replace(reg, '')
          }
          let strAry = TempVariable['castleEvent'].split('<>')
          if (strAry[10] == ' ') {
            strAry[10] = ''
          }
          TempVariable['castleBG'] = strAry[10]
          GameState = 'castle'
        } else {
          GameState = 'castleTownStart'
        }
        townAction()
        return
      } else if (value == 'edgeOfTown') {
        GameState = 'edgeOfTownStart'
        townAction()
        return
      }
    }
    MP.clearTextSurface('all')
    selAry.push(GameData['Tavern'])
    selAry.push(GameData['Inn'])
    selAry.push(GameData['Shop'])
    selAry.push(GameData['Temple'])
    selAry.push(GameData['Castle'])
    selAry.push(GameData['EdgeOfTown'])
    valueAry = ['tavern', 'inn', 'shop', 'temple', 'castle', 'edgeOfTown']
    y *= 3
  } else if (GameState == 'tavern') {
    if (key == 'cancel') {
      key = 'enter'
      value = 'goOut'
    }
    if (key == 'enter') {
      if (value == 'add') {
        if (MP.checkConditionAndViewMessage('PARTY_FULL')) {
          GameState = 'tavernStartReturn'
          return
        }
        if (MP.checkConditionAndViewMessage('NO_ONE_ADD')) {
          GameState = 'tavernStartReturn'
          return
        }
        GameState = 'tavernAdd'
        townAction()
        return
      } else if (value == 'remove') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'tavernStartReturn'
          return
        }
        GameState = 'tavernRemove'
        townAction()
        return
      } else if (value == 'inspect') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'tavernStartReturn'
          return
        }
        GameState = 'tavernInspect'
        townAction()
        return
      } else if (value == 'divvyGold') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'tavernStartReturn'
          return
        }
        PARTY[PlayData['ActiveParty']].divvyGold()
      } else if (value == 'goOut') {
        saveData()
        GameState = 'castleTownStart'
        townAction()
        return
      }
    }
    MP.clearTextSurface('all')
    selAry.push(getDefaultMessage('ADD', 1))
    selAry.push(getDefaultMessage('REMOVE', 1))
    selAry.push(getDefaultMessage('INSPECT', 1))
    selAry.push(getDefaultMessage('DIVVY_GOLD', 1))
    selAry.push(getDefaultMessage('GO_OUT', 1))
    valueAry = ['add', 'remove', 'inspect', 'divvyGold', 'goOut']
    y *= 3
  } else if (GameState == 'tavernAdd') {
    let ptNum
    if (key == 'enter') {
      if (MP.SelectMode['colorAry'][MP.SelectMode['select']] == 'white') {
        if (PlayData['ActiveParty'] < 0) {
          PlayData['ActiveParty'] = getNewParty()
        }
        ptNum = PlayData['ActiveParty']
        let pcNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
        PARTY[ptNum].addMember(pcNum)
        MP.viewPartyStatus()
        value = MP.controlSelect('delete')
      }
    }
    ptNum = PlayData['ActiveParty']
    if (ptNum > -1) {
      if (PARTY[ptNum].PartyMember[GameData['PARTY_MEMBER_MAX'] - 1] > -1) {
        key = 'cancel'
      }
    }
    if (key != 'cancel') {
      let flag = false
      if (PlayData['GameFlagS'][0] != GameData['CAN_ADD_ALIGNMENT_DIFFERENT']) {
        flag = true
      }
      let ptAli = 1
      if (ptNum > -1) {
        ptAli = PARTY[ptNum].checkAlignment()
      }
      colorAry = []
      for (let i = 0; i < PlayData['PcMax']; i++) {
        let pcNum = PlayData['PcList'][i]
        if (PC[pcNum].PartyNum < 0) {
          selAry.push(PC[pcNum].nameListStr())
          valueAry.push(String(pcNum))
          let ali = PC[pcNum].Alignment
          if (!flag && ((ptAli == 0 && ali == 2) || (ptAli == 2 && ali == 0))) {
            colorAry.push('gray')
          } else {
            colorAry.push('white')
          }
        }
      }
      if (selAry.length < 1) {
        key = 'cancel'
      }
    }
    if (key == 'cancel') {
      GameState = 'tavern'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'add'
      townAction('none')
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('ADD_WHOM', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    y *= 6
    lineNum = 10
  } else if (GameState == 'tavernRemove') {
    let ptNum = PlayData['ActiveParty']
    let memberNum = PARTY[ptNum].getMemberNum()
    if (key == '' && memberNum == 1) {
      MP.SelectMode['select'] = 0
      MP.SelectMode['valueAry'][0] = String(PARTY[ptNum].PartyMember[0])
      key = 'enter'
    }
    if (key == 'enter') {
      let pcNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
      PARTY[ptNum].removeMember(pcNum)
      if (PARTY[ptNum].getMemberNum() == 0) {
        PlayData['ActiveParty'] = -1
        key = 'cancel'
      }
      MP.viewPartyStatus()
      value = MP.controlSelect('delete')
    }
    if (key == 'cancel') {
      MP.viewPartyStatus()
      GameState = 'tavern'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'remove'
      townAction('none')
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('REMOVE_WHOM', 1),
      'center',
      MP.LINE_HEIGHT * 6
    )
    MP.TextSurfaceNum++
    memberNum = PARTY[ptNum].getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      selAry.push(String(i))
      valueAry.push(String(PARTY[ptNum].PartyMember[i]))
    }
    mode = 'pcSel'
  } else if (GameState == 'tavernInspect') {
    if (key == 'cancel') {
      MP.viewPartyStatus()
      GameState = 'tavern'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'inspect'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.viewPartyStatus('clear')
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      PlayData['StatusAction'] = 'tavernInspect'
      GameState = 'inspect'
      statusAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('INSPECT_WHOM', 1),
      'center',
      MP.LINE_HEIGHT * 6
    )
    MP.TextSurfaceNum++
    let ptNum = PlayData['ActiveParty']
    let memberNum = PARTY[ptNum].getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      selAry.push(String(i))
      valueAry.push(String(PARTY[ptNum].PartyMember[i]))
    }
    mode = 'pcSel'
  } else if (GameState.match(/^(inn|shop)$/)) {
    let ptNum = PlayData['ActiveParty']
    if (key == 'enter') {
      TempVariable['pcNumInParty'] = MP.SelectMode['select']
      let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
      let pc = PC[pcNum]
      if (pc.State > 1) {
        let nextPcNumInParty = getNextPcNumInParty(TempVariable['pcNumInParty'])
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = String(
          PARTY[ptNum].PartyMember[nextPcNumInParty]
        )
        townAction('none')
        return
      } else {
        if (GameState == 'inn') {
          GameState = 'innStay'
        } else if (GameState == 'shop') {
          GameState = 'shopCommand'
        }
        townAction()
        return
      }
    } else if (key == 'cancel') {
      deleteTempVariable()
      saveData()
      GameState = 'castleTownStart'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    let str = ''
    if (GameState == 'inn') {
      str = 'WHO_STAY'
    } else if (GameState == 'shop') {
      str = 'WHO_ENTER'
    }
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage(str, 1),
      'center',
      MP.LINE_HEIGHT * 6
    )
    MP.TextSurfaceNum++
    memberNum = PARTY[ptNum].getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      selAry.push(String(i))
      valueAry.push(String(PARTY[ptNum].PartyMember[i]))
    }
    mode = 'pcSel'
  } else if (GameState == 'innStay') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    if (key == 'cancel') {
      key = 'enter'
      value = 6
    }
    if (key == 'enter') {
      if (value == 6) {
        let nextPcNumInParty = getNextPcNumInParty(TempVariable['pcNumInParty'])
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = String(
          PARTY[ptNum].PartyMember[nextPcNumInParty]
        )
        GameState = 'inn'
        townAction('none')
        return
      } else if (value == 5) {
        PARTY[ptNum].poolGold(pcNum)
      } else {
        if (TempVariable['innCharge'][value] > pc.Gold) {
          MP.drawTextFrame(
            MP.TextSurface[MP.TextSurfaceNum],
            getDefaultMessage('CANNOT_AFFORD', 1),
            'center',
            MP.LINE_HEIGHT * 4
          )
          GameState = 'innStayReturn'
          return
        } else {
          MP.controlPreSelect('clear')
          MP.controlPreSelect('push')
          pc.controlGold(-1 * TempVariable['innCharge'][value], true)
          MP.clearTextSurface('all')
          let tmpStr = ''
          if (TempVariable['innHealing'][value] > 0) {
            tmpStr = 'RECUPERATING'
          } else {
            tmpStr = 'NAPPING'
          }
          tmpStr = getDefaultMessage(tmpStr)
          tmpStr = tmpStr.replace(/\[name\]/g, pc.Name[0])
          MP.drawTextFrame(
            MP.TextSurface[MP.TextSurfaceNum],
            tmpStr,
            'center',
            MP.LINE_HEIGHT * 6
          )
          TempVariable['innStayRoom'] = value
          GameState = 'innStay2Return'
          return
        }
      }
    }
    MP.clearTextSurface('all')
    let str = getDefaultMessage('WELCOME', 1)
    str = str.replace(/\[name\]/g, pc.Name[0]) + '\n'
    str += getDefaultMessage('WHERE_STAY', 1)
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 3
    )
    str = MP.strFitLength(getDefaultMessage('HAVE_MONEY', 1), 20) + ' '
    str += MP.strFitLength(MP.numberFormat(pc.Gold), 15, 'right') + ' '
    str += GameData['GP']
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 16
    )
    MP.TextSurfaceNum++
    let messageAry = [
      'THE_STABLES',
      'A_COT',
      'ECONOMY_ROOMS',
      'MERCHANT_SUITES',
      'THE_ROYAL_SUITE'
    ]
    TempVariable['innCharge'] = []
    TempVariable['innHealing'] = []
    for (let i = 0; i < 5; i++) {
      let tmpStr = getDefaultMessage(messageAry[i], 1)
      str = MP.strFitLength(tmpStr, 20) + ' '
      let formula = replaceFormula(GameData['INN_CHARGE'][i], [['pc', pcNum]])
      let charge = Math.floor(strCalculation(formula))
      if (charge < 0) {
        charge = 0
      } else if (charge > 999999999999) {
        charge = 999999999999
      }
      TempVariable['innCharge'].push(charge)
      formula = replaceFormula(GameData['INN_HEALING'][i], [['pc', pcNum]])
      let healing = Math.floor(strCalculation(formula))
      if (healing < 0) {
        healing = 0
      }
      TempVariable['innHealing'].push(healing)
      str += MP.strFitLength(MP.numberFormat(charge), 15, 'right') + ' '
      str += GameData['GP']
      let day = GameData['INN_DAYS'][i]
      let week = Math.floor(day / 7)
      if (day < 1) {
        tmpStr = ''
      } else if (day < 2) {
        tmpStr = getDefaultMessage('INN_DAY', 1)
      } else if (day < 7) {
        tmpStr = getDefaultMessage('INN_DAYS', 1)
      } else if (day < 14) {
        tmpStr = getDefaultMessage('INN_WEEK', 1)
      } else {
        tmpStr = getDefaultMessage('INN_WEEKS', 1)
      }
      tmpStr = tmpStr.replace(/\[day\]/g, String(day))
      tmpStr = tmpStr.replace(/\[week\]/g, String(week))
      tmpStr = MP.strCut(tmpStr, 13)
      if (tmpStr != '') {
        str += ' /' + tmpStr
      }
      selAry.push(str)
    }
    selAry.push(getDefaultMessage('POOL_GOLD', 1))
    selAry.push(getDefaultMessage('INN_LEAVE', 1))
    y *= 7
    comment = 'inn'
  } else if (GameState == 'innStay2') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    let room = MP.PreSelect['select'][0]
    MP.clearTextSurface('all')
    pc.controlHp(TempVariable['innHealing'][room], true)
    for (let i = 0; i < GameData['SPELL_KIND']; i++) {
      for (let j = 0; j < GameData['SPELL_LVMAX']; j++) {
        let formula = GameData['INN_MP_HEALING'][room]
        formula = formula.replace(
          /pc\.mpMax([^\[]|$)/g,
          String(pc.MpMax[i][j]) + '$1'
        )
        formula = formula.replace(
          /pc\.mp([^\[]|$)/g,
          String(pc.Mp[i][j]) + '$1'
        )
        let healing = Math.floor(
          strCalculation(replaceFormula(formula, [['pc', pcNum]]))
        )
        if (healing < 0) {
          healing = 0
        }
        pc.controlMp(i, j, healing, true)
      }
    }
    if (pc.State == 1) {
      pc.State = 0
    }
    let days = pc.Days + GameData['INN_DAYS'][room]
    if (days > 365) {
      days -= 365
      pc.Days = days
      pc.Age++
    } else {
      pc.Days = days
    }
    let burial = false
    if (pc.Age > pc.Lifetime) {
      burial = true
    }
    if (!burial) {
      if (pc.NextExp > 0) {
        let str = getDefaultMessage('NEED_EXP')
        str = str.replace(
          /\[nextExp\]/g,
          MP.strFitLength(MP.numberFormat(pc.NextExp), 15, 'right')
        )
        str = MP.strChangeLine(str, 48, 12, true)
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          str,
          'center',
          MP.LINE_HEIGHT * 3
        )
        MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
        MP.controlPreSelect('pop')
        GameState = 'innStayReturn'
        return
      } else if (pc.Level >= 99999) {
        MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
        MP.controlPreSelect('pop')
        GameState = 'innStay'
        townAction('return')
        return
      } else {
        pc.Level++
        let str = getDefaultMessage('MADE_NEXT_LEVEL', 1)
        str = str.replace(/\[level\]/g, String(pc.Level))
        let addStr = ''
        if (pc.learnedSpell()) {
          addStr += '\n' + getDefaultMessage('LEARNED_SPELL', 1)
        }
        pc.gainedMp()
        let changeAbiAry = pc.levelUpAbility(GameData['INN_ABI_DEC_RATE'][room])
        for (let i = 0; i < changeAbiAry.length; i++) {
          if (changeAbiAry[i] == 0) {
            continue
          }
          let tmpStr = ''
          if (changeAbiAry[i] > 0) {
            tmpStr = 'GAINED_ABI'
          } else {
            tmpStr = 'LOST_ABI'
          }
          tmpStr = getDefaultMessage(tmpStr, 1)
          tmpStr = tmpStr.replace(/\[abi\]/g, GameData['ABILITY'][i])
          addStr += '\n' + tmpStr
        }
        pc.check()
        if (pc.HpMax0 < 99999) {
          let num = pc.gainedHp()
          pc.HpMax0 += num
          pc.Hp += num
          let tmpStr = ''
          if (num == 1) {
            tmpStr = 'GAINED_HP_1'
          } else {
            tmpStr = 'GAINED_HP'
          }
          tmpStr = getDefaultMessage(tmpStr, 1)
          tmpStr = tmpStr.replace(/\[gainedHp\]/g, String(num))
          addStr += '\n' + tmpStr
        }
        if (addStr != '') {
          str += '\n' + addStr
        }
        pc.NextUpExp = -1
        pc.check()
        for (let i = 0; i < GameData['ABILITY'].length; i++) {
          if (pc.Ability0[i] < 1 && !GameData['ABILITY_NO_DEATH'][i]) {
            burial = true
            break
          }
        }
        if (!burial) {
          sePlay('levelup')
          MP.drawTextFrame(
            MP.TextSurface[MP.TextSurfaceNum],
            str,
            'center',
            MP.LINE_HEIGHT * 3,
            36
          )
          MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
          MP.controlPreSelect('pop')
          GameState = 'innStayReturn'
          return
        }
      }
    }
    if (burial) {
      let str = getDefaultMessage('DIE_OLD_AGE')
      str = str.replace(/\[name\]/g, pc.Name[0])
      deletePc(pcNum)
      MP.viewPartyStatus()
      MP.controlPreSelect('pop')
      if (PARTY[ptNum].getMemberNum() == 0) {
        deleteTempVariable()
        PlayData['ActiveParty'] = -1
        saveData()
        GameState = 'castleTownStartReturn'
      } else {
        let nextPcNumInParty = getNextPcNumInParty(
          TempVariable['pcNumInParty'] - 1
        )
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = String(
          PARTY[ptNum].PartyMember[nextPcNumInParty]
        )
        GameState = 'innReturn'
      }
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        str,
        'center',
        MP.LINE_HEIGHT * 3
      )
      return
    }
  } else if (GameState == 'shopCommand') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    if (key == 'cancel') {
      key = 'enter'
      value = 'leave'
    }
    if (key == 'enter') {
      if (value == 'leave') {
        let nextPcNumInParty = getNextPcNumInParty(TempVariable['pcNumInParty'])
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = String(
          PARTY[ptNum].PartyMember[nextPcNumInParty]
        )
        GameState = 'shop'
        townAction('none')
        return
      } else if (value == 'buy') {
        if (GameData['SHOP_KIND_LIST'].length > 0) {
          MP.controlPreSelect('clear')
          MP.controlPreSelect('push')
          GameState = 'shopBuy'
          townAction()
          return
        }
      } else if (value.match(/^(sell|uncurse|identify)$/)) {
        if (pc.haveItemNum(-1) > 0) {
          MP.controlPreSelect('clear')
          MP.controlPreSelect('push')
          if (value == 'sell') {
            GameState = 'shopSell'
          } else if (value == 'uncurse') {
            GameState = 'shopUncurse'
          } else if (value == 'identify') {
            GameState = 'shopIdentify'
          }
          townAction()
          return
        }
      } else if (value == 'poolGold') {
        PARTY[ptNum].poolGold(pcNum)
      }
    }
    MP.clearTextSurface('all')
    MP.TopSurface.clear()
    drawShopWelcome(pc)
    MP.drawHaveMoney(pc)
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('BUY', 1))
    valueAry.push('buy')
    selAry.push(getDefaultMessage('SELL', 1))
    valueAry.push('sell')
    selAry.push(getDefaultMessage('UNCURSE', 1))
    valueAry.push('uncurse')
    selAry.push(getDefaultMessage('IDENTIFY', 1))
    valueAry.push('identify')
    selAry.push(getDefaultMessage('POOL_GOLD', 1))
    valueAry.push('poolGold')
    selAry.push(getDefaultMessage('LEAVE', 1))
    valueAry.push('leave')
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 16
    y *= 6
  } else if (GameState == 'shopBuy') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    if (key == 'cancel') {
      key = 'enter'
      value = '-1'
    }
    if (key == 'enter') {
      if (value == '-1') {
        MP.controlPreSelect('pop')
        GameState = 'shopCommand'
        townAction('return')
        return
      } else {
        let itemKind = Number(value)
        TempVariable['itemList'] = []
        TempVariable['itemViewList'] = []
        for (let i = 0; i < ITEM.length; i++) {
          if (
            ITEM[i].TYPE == itemKind &&
            ITEM[i].PRICE > 0 &&
            ITEM[i].STOCK_OK
          ) {
            if (ITEM[i].Stock > 0) {
              TempVariable['itemList'].push(i + 1)
            } else if (!GameData['VIEW_NOT_SOLD_OUT']) {
              TempVariable['itemList'].push(-1 * (i + 1))
            }
          }
        }
        let gpLen = MP.strCount(GameData['GP'])
        for (let i = 0; i < TempVariable['itemList'].length; i++) {
          let itemNum = TempVariable['itemList'][i]
          if (itemNum < 0) {
            let len
            if (GameData['CARRY_INDICATED_BY_STORE']) {
              len = 50 + gpLen
            } else {
              len = 43 + gpLen
            }
            let str = MP.strFitLength(
              getDefaultMessage('LIST_SOLD_OUT', 1),
              len
            )
            TempVariable['itemViewList'].push(str)
          } else {
            itemNum--
            let item = ITEM[itemNum]
            let str = ''
            if (GameData['CARRY_INDICATED_BY_STORE']) {
              let tmpStr = ''
              if (item.RANGE[0] == 0 && item.RANGE[1] == 2) {
                tmpStr = 'SHOP_RANGE_SHORT_INDIRECT'
              } else if (item.RANGE[0] == 0 && item.RANGE[1] == 4) {
                tmpStr = 'SHOP_RANGE_LONG_INDIRECT'
              } else if (item.RANGE[0] == 2 && item.RANGE[1] == 0) {
                tmpStr = 'SHOP_RANGE_SHORT'
              } else if (item.RANGE[0] == 2 && item.RANGE[1] == 2) {
                tmpStr = 'SHOP_RANGE_SHORT_SHORT'
              } else if (item.RANGE[0] == 2 && item.RANGE[1] == 4) {
                tmpStr = 'SHOP_RANGE_SHORT_LONG'
              } else if (item.RANGE[0] == 4 && item.RANGE[1] == 0) {
                tmpStr = 'SHOP_RANGE_NORMAL'
              } else if (item.RANGE[0] == 4 && item.RANGE[1] == 2) {
                tmpStr = 'SHOP_RANGE_MIDDLE'
              } else if (item.RANGE[0] == 4 && item.RANGE[1] == 4) {
                tmpStr = 'SHOP_RANGE_LONG'
              }
              tmpStr = getDefaultMessage(tmpStr, 1, 6)
              str += MP.strFitLength(tmpStr, 7)
            }
            if (item.EQUIP_REQ_CLASS != '-' && !item.equipCheck(pcNum)) {
              str += '#'
            } else {
              str += ' '
            }
            str += MP.strFitLength(item.getName(), 26)
            str +=
              MP.strFitLength(MP.numberFormat(item.PRICE), 15, 'right') + ' '
            str += GameData['GP']
            TempVariable['itemViewList'].push(str)
          }
        }
        if (TempVariable['itemList'].length > 0) {
          MP.controlPreSelect('push')
          GameState = 'shopBuy2'
          townAction()
          return
        }
      }
    }
    MP.clearTextSurface('all')
    MP.TopSurface.clear()
    drawShopWelcome(pc)
    MP.drawHaveMoney(pc)
    MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
    MP.TextSurfaceNum++
    for (let i = 0; i < GameData['SHOP_KIND_LIST'].length; i++) {
      let num = GameData['SHOP_KIND_LIST'][i]
      let str = ''
      if (num == 0) {
        str = 'WEAPON'
      } else if (num == 1) {
        str = 'ARMOR'
      } else if (num == 2) {
        str = 'SHIELD'
      } else if (num == 3) {
        str = 'HELM'
      } else if (num == 4) {
        str = 'GAUNTLETS'
      } else if (num == 5) {
        str = 'BOOTS'
      } else if (num == 6) {
        str = 'MISC_ITEM'
      }
      selAry.push(getDefaultMessage(str, 1))
      valueAry.push(String(num))
    }
    selAry.push(getDefaultMessage('LEAVE', 1))
    valueAry.push('-1')
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 5
    y *= 7
  } else if (GameState == 'shopBuy2') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    let itemKind = Number(
      MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
    )
    if (key == 'cancel' || TempVariable['itemList'].length < 1) {
      MP.controlPreSelect('pop')
      GameState = 'shopBuy'
      townAction('return')
      return
    } else if (key == 'enter') {
      let itemNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
      let notBuy = ''
      if (itemNum < 0) {
        notBuy = 'SOLD_OUT'
      } else {
        itemNum--
        let item = ITEM[itemNum]
        if (pc.Gold < item.PRICE) {
          notBuy = 'CANNOT_AFFORD'
        } else if (pc.putItem(-1) < 0) {
          notBuy = 'CANNOT_CARRY'
        } else if (item.EQUIP_REQ_CLASS != '-' && !item.equipCheck(pcNum)) {
          MP.controlPreSelect('push')
          GameState = 'shopBuy3'
          townAction()
          return
        } else {
          MP.controlPreSelect('push')
          GameState = 'shopBuy3'
          MP.SelectMode['valueAry'][MP.SelectMode['select']] = 0
          townAction('enter')
          return
        }
      }
      if (notBuy != '') {
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage(notBuy, 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        GameState = 'shopBuy2Return'
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawHaveMoney(pc)
    MP.TextSurfaceNum++
    for (let i = 0; i < TempVariable['itemList'].length; i++) {
      selAry.push(TempVariable['itemViewList'][i])
      valueAry.push(String(TempVariable['itemList'][i]))
    }
    y *= 3
    lineNum = 12
    comment = 'itemMinus'
  } else if (GameState == 'shopBuy3') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    let itemKind = Number(
      MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
    )
    let itemNum =
      Number(MP.PreSelect['valueAry'][2][MP.PreSelect['select'][2]]) - 1
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        let item = ITEM[itemNum]
        pc.controlGold(-1 * item.PRICE, true)
        PlayData['ItemFlag'][itemNum] = true
        pc.putItem(itemNum, 1)
        item.setStock(-1, true)
        pc.check()
        MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
        MP.clearTextSurface('all')
        MP.drawHaveMoney(pc)
        MP.viewPreSelectMode(MP.TextSurfaceNum, 2)
        let str = ''
        let delFlag = false
        if (item.Stock == 0) {
          let sel = MP.PreSelect['select'][2]
          if (GameData['VIEW_NOT_SOLD_OUT']) {
            TempVariable['itemList'].splice(sel, 1)
            TempVariable['itemViewList'].splice(sel, 1)
            delFlag = true
          } else {
            let soldOutNum = -1 * TempVariable['itemList'][sel]
            TempVariable['itemList'][sel] = soldOutNum
            MP.PreSelect['valueAry'][2][sel] = String(soldOutNum)
            let gpLen = MP.strCount(GameData['GP'])
            let len
            if (GameData['CARRY_INDICATED_BY_STORE']) {
              len = 50 + gpLen
            } else {
              len = 43 + gpLen
            }
            let tmpStr = MP.strFitLength(
              getDefaultMessage('LIST_SOLD_OUT', 1),
              len
            )
            TempVariable['itemViewList'][sel] = tmpStr
          }
          str = 'LAST_ONE'
        } else {
          str = 'JUST_YOU'
        }
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage(str, 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        MP.controlPreSelect('pop')
        if (delFlag) {
          MP.controlSelect('delete')
        }
        GameState = 'shopBuy2Return'
        return
      } else {
        MP.controlPreSelect('pop')
        GameState = 'shopBuy2'
        townAction('return')
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawHaveMoney(pc)
    MP.viewPreSelectMode(MP.TextSurfaceNum, 2)
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('UNUSE_ITEM', 1),
      'center',
      MP.LINE_HEIGHT * 4
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 7
  } else if (GameState.match(/^shop(Sell|Uncurse|Identify)$/)) {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    if (key == 'enter') {
      let sel = MP.SelectMode['select']
      let str = ''
      if (GameState.match(/Sell$/)) {
        if (TempVariable['itemPrice'][sel] < 1) {
          str = 'NOT_INTERESTED'
        } else if (pc.Equip[sel] == 2) {
          str = 'CURSED_ITEM'
        } else if (pc.Equip[sel] == 1 || pc.Equip[sel] == 3) {
          MP.controlPreSelect('push')
          GameState = 'shopSell2'
          townAction()
          return
        } else {
          MP.controlPreSelect('push')
          GameState = 'shopSell2'
          MP.SelectMode['valueAry'][MP.SelectMode['select']] = 0
          townAction('enter')
          return
        }
      } else if (GameState.match(/Uncurse$/)) {
        if (pc.Equip[sel] == 2) {
          if (pc.Gold < TempVariable['itemPrice'][sel]) {
            str = 'CANNOT_AFFORD'
          } else {
            pc.controlGold(TempVariable['itemPrice'][sel] * -1, true)
            if (GameData['ITEM_DO_NOT_DISAPPEAR_AT_SHOPS']) {
              pc.Equip[sel] = 0
            } else {
              pc.removeHaveItem(sel)
              MP.controlSelect('deleteSlide')
            }
            pc.check()
            MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
            str = 'ANYTHING_ELSE'
          }
        } else {
          str = 'NOT_CURSED'
        }
      } else if (GameState.match(/Identify$/)) {
        if (pc.ItemDecided[sel] == 0) {
          if (pc.Gold < TempVariable['itemPrice'][sel]) {
            str = 'CANNOT_AFFORD'
          } else {
            pc.controlGold(TempVariable['itemPrice'][sel] * -1, true)
            pc.ItemDecided[sel] = 1
            PlayData['ItemFlag'][pc.Item[sel]] = true
            str = 'ANYTHING_ELSE'
          }
        } else {
          str = 'IDENTIFIED_SHOP'
        }
      }
      if (str != '') {
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage(str, 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        GameState += 'Return'
        return
      }
    }
    let itemMax = pc.haveItemNum(-1)
    if (itemMax < 1) {
      key = 'cancel'
    }
    if (key == 'cancel') {
      MP.controlPreSelect('pop')
      GameState = 'shopCommand'
      townAction('return')
      return
    }
    MP.clearTextSurface('all')
    MP.TopSurface.clear()
    MP.drawHaveMoney(pc)
    MP.TextSurfaceNum++
    TempVariable['itemPrice'] = []
    for (let i = 0; i < itemMax; i++) {
      let itemNum = pc.Item[i]
      let item = ITEM[itemNum]
      let price = 0
      let formula = ''
      if (GameState.match(/Sell$/)) {
        if (item.PRICE > 0) {
          if (pc.ItemDecided[i] == 1) {
            formula = GameData['ITEM_SELL']
          } else {
            formula = GameData['ITEM_SELL_UNDECIDED']
          }
        }
      } else if (GameState.match(/Uncurse$/)) {
        if (pc.Equip[i] == 2) {
          formula = GameData['ITEM_UNCURSE']
        }
      } else if (GameState.match(/Identify$/)) {
        if (pc.ItemDecided[i] == 0) {
          formula = GameData['ITEM_IDENTIFY']
        }
      }
      if (formula != '') {
        formula = replaceFormula(formula, [
          ['pc', pcNum],
          ['item', itemNum]
        ])
        price = Math.floor(strCalculation(formula))
      }
      TempVariable['itemPrice'].push(price)
      let str = MP.strFitLength(pc.getItemName(i, 'equip'), 26)
      str += MP.strFitLength(MP.numberFormat(price), 15, 'right') + ' '
      str += GameData['GP']
      selAry.push(str)
      valueAry.push(String(i))
    }
    y *= 3
    lineNum = PC[pcNum].ItemMaxNum
    if (lineNum > 12) {
      lineNum = 12
    }
    PlayData['StatusNum'] = pcNum
    comment = 'haveItem'
    if (GameState.match(/^shop(Uncurse|Identify)$/)) {
      value = Number(value)
      let ary = []
      let count = value
      for (let i = 0; i < itemMax; i++) {
        ary.push(count)
        count++
        if (count >= itemMax) {
          count = 0
        }
      }
      for (let i = 0; i < itemMax; i++) {
        if (GameState.match(/Uncurse$/)) {
          if (pc.Equip[ary[i]] == 2) {
            value = ary[i]
            break
          }
        } else {
          if (pc.ItemDecided[ary[i]] == 0) {
            value = ary[i]
            break
          }
        }
      }
      value = String(value)
    }
  } else if (GameState == 'shopSell2') {
    let ptNum = PlayData['ActiveParty']
    let pcNum = PARTY[ptNum].PartyMember[TempVariable['pcNumInParty']]
    let pc = PC[pcNum]
    let sel = MP.PreSelect['select'][1]
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      MP.clearTextSurface('all')
      MP.viewPreSelectMode(MP.TextSurfaceNum, 1)
      let str = ''
      let delFlag = false
      if (value == 0) {
        let itemNum = pc.Item[sel]
        let item = ITEM[itemNum]
        pc.controlGold(TempVariable['itemPrice'][sel], true)
        PlayData['ItemFlag'][itemNum] = true
        pc.removeHaveItem(sel)
        if (item.STOCK_OK) {
          item.setStock(1, true)
        }
        pc.check()
        MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
        str = 'ANYTHING_ELSE'
        delFlag = true
      } else {
        str = 'MISTAKES'
      }
      MP.drawHaveMoney(pc)
      MP.controlPreSelect('pop')
      if (delFlag) {
        MP.controlSelect('deleteSlide')
      }
      let listFlag = false
      if (!PlayData['ShopItemListFull']) {
        checkShopItemListFull()
        if (PlayData['ShopItemListFull']) {
          listFlag = true
        }
      }
      if (listFlag) {
        strAry = GameData['ITEM_COMPLETE'].split('<+>')
        if (strAry[0] == 'none') {
          strAry[0] = ''
        }
        controlFlag(strAry[0])
        let itemNum = Number(strAry[1])
        if (itemNum > -1) {
          itemNum = checkItemNum(itemNum)
          let decided = 0
          if (
            (ITEM[itemNum].DECIDED == 0 && GameData['ITEM_DECIDED']) ||
            ITEM[itemNum].DECIDED == 1
          ) {
            decided = 1
            PlayData['ItemFlag'][itemNum] = true
          }
          pc.putItem(itemNum, decided)
          pc.check()
          MP.viewPartyStatus(true, TempVariable['pcNumInParty'])
        }
        if (strAry[2] == '') {
          strAry[2] = getDefaultMessage('ALL_ITEM')
          strAry[3] = 'center'
        }
        MP.TextSurfaceNum++
        MP.controlPreSelect('pop')
        GenericVariable['FullKeyInvalid'] = true
        GameState = 'shopCommandReturn'
        if (readGraphicInText(strAry[2], strAry[3])) {
          return
        }
        readEndAction()
        return
      } else {
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage(str, 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        GameState = 'shopSellReturn'
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawHaveMoney(pc)
    MP.viewPreSelectMode(MP.TextSurfaceNum, 1)
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('EQUIPPED_ITEM', 1),
      'center',
      MP.LINE_HEIGHT * 4
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 7
  } else if (GameState == 'temple') {
    if (key == 'cancel') {
      deleteTempVariable()
      saveData()
      GameState = 'castleTownStart'
      townAction()
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      GameState = 'temple2'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_HELP', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    TempVariable['donation'] = []
    for (let i = 0; i < PlayData['PcMax']; i++) {
      let pcNum = PlayData['PcList'][i]
      let cost = templeCost(pcNum)
      let str = ''
      if (cost >= 0 && PC[pcNum].PartyNum < 0) {
        TempVariable['donation'].push(cost)
        str += MP.strFitLength(PC[pcNum].Name[0], 22)
        str += MP.strFitLength(MP.numberFormat(cost), 15, 'right') + ' '
        str += GameData['GP'] + ' '
        str += PC[pcNum].getStateStr()
        selAry.push(str)
        valueAry.push(String(pcNum))
      }
    }
    if (selAry.length < 1) {
      deleteTempVariable()
      saveData()
      GameState = 'castleTownStart'
      townAction()
      return
    }
    y *= 6
    lineNum = 10
  } else if (GameState == 'temple2') {
    let sel = MP.PreSelect['select'][0]
    if (key == 'cancel') {
      MP.controlPreSelect('pop')
      GameState = 'temple'
      townAction('return')
      return
    } else if (key == 'enter') {
      let donation = TempVariable['donation'][sel]
      let pcNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
      let targetNum = Number(
        MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
      )
      if (PC[pcNum].Gold < donation) {
        MP.clearTextSurface('all')
        let str = getDefaultMessage('GET_OUT')
        str = MP.strChangeLine(str, 48, 12, true)
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          str,
          'center',
          MP.LINE_HEIGHT * 3
        )
        deleteTempVariable()
        saveData()
        GameState = 'castleTownStartReturn'
        return
      }
      PC[pcNum].controlGold(-1 * donation, true)
      let str = getDefaultMessage('PRAY', 1, 48)
      let len = MP.strCount(str)
      let strAry = str.split('-')
      let tmpStr = ''
      for (let i = 0; i < strAry.length; i++) {
        if (i > 0) {
          tmpStr += '-'
        }
        tmpStr += strAry[i]
        strAry[i] = MP.strFitLength(tmpStr, len)
      }
      let target = PC[targetNum]
      tmpStr = ''
      let burial = false
      let deleteSel = true
      if (target.State == 2 || target.State == 3) {
        target.State = 0
        tmpStr = 'CURED'
      } else {
        let formula = replaceFormula(GameData['RESUSCITATE_PROB'], [
          ['pc', targetNum]
        ])
        let prob = Math.floor(strCalculation(formula))
        printDebugMessage('resurrection rate: ' + String(prob) + '%')
        if (prob >= dice(1, 100)) {
          target.State = 0
          if (target.Level < 1) {
            target.Level = 1
          }
          if (target.HpMax0 < 1) {
            target.HpMax0 = 1
          }
          if (target.HpMax < 1) {
            target.HpMax = 1
          }
          if (GameData['FULL_HP_TEMPLE']) {
            target.controlHp(99999)
          } else {
            target.controlHp(1)
          }
          if (GameData['FULL_MP_TEMPLE']) {
            for (let i = 0; i < GameData['SPELL_KIND']; i++) {
              for (let j = 0; j < GameData['SPELL_LVMAX']; j++) {
                target.controlMp(i, j, 99)
              }
            }
          }
          formula = replaceFormula(GameData['TEMPLE_ADD_AGE'], [
            ['pc', targetNum]
          ])
          let addAge = Math.floor(strCalculation(formula))
          printDebugMessage('add age: ' + String(addAge))
          target.Age += addAge
          if (target.Age < 1) {
            target.Age = 1
          } else if (target.Age > 999) {
            target.Age = 999
          }
          tmpStr = 'REVIVED'
        } else if (GameData['TEMPLE_NOT_AGGRAVATED']) {
          tmpStr = 'FIZZLE'
        } else if (target.State == 4) {
          target.State = 5
          tmpStr = 'BECAME_ASH'
          deleteSel = false
        } else if (target.State == 5) {
          burial = true
          tmpStr = 'BURIED'
        }
      }
      tmpStr = getDefaultMessage(tmpStr).replace(/\[name\]/g, target.Name[0])
      tmpStr = MP.strChangeLine(tmpStr, 48, 12, true)
      strAry.push(tmpStr)
      if (burial) {
        deletePc(targetNum)
      }
      MP.clearTextSurface('all')
      MP.viewPartyStatus()
      MP.controlPreSelect('pop')
      if (deleteSel) {
        MP.controlSelect('delete')
      }
      MP.setPassingMessage(strAry, 3, 'left', 60)
      GameState = 'templeReturn'
      return
    }
    MP.clearTextSurface('all')
    let message = getDefaultMessage('WHO_TITHE')
    message = message.replace(
      /\[gold\]/g,
      MP.numberFormat(TempVariable['donation'][sel])
    )
    message = message.replace(/\[GP\]/g, GameData['GP'])
    message = MP.strChangeLine(message, 48, 12, true)
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      message,
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    let ptNum = PlayData['ActiveParty']
    memberNum = PARTY[ptNum].getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      selAry.push(String(i))
      valueAry.push(String(PARTY[ptNum].PartyMember[i]))
    }
    mode = 'pcSel'
    comment = 'haveMoney'
  } else if (GameState == 'castle') {
    let strAry = TempVariable['castleEvent'].split('<>')
    if (strAry[2] == 'none') {
      deleteTempVariable()
      GameState = 'castleTownStart'
      townAction()
      return
    }
    if (!strAry[7].match(/^(| )$/)) {
      MP.paintMask('clear')
      MP.TopSurface.clear()
      if (TempVariable['castleEventCG'].length > 0) {
        let castleCG = checkGraphic_Event(TempVariable['castleEventCG'])
        if (castleCG.length > 0) {
          readGraphicFile_Event(castleCG, townAction)
          return
        }
      }
      if (TempVariable['castleBG'] != '') {
        let castleBG = checkGraphic_Castle(TempVariable['castleBG'])
        if (castleBG != '') {
          readGraphicFile_Castle(castleBG, townAction)
          return
        }
      }
      GenericVariable['FullKeyInvalid'] = false
    }
    let ptNum = PlayData['ActiveParty']
    let strAry2
    if (strAry[3] != '') {
      strAry[3] = MP.getCmNum(strAry[3])
      strAry2 = strAry[3].split(',')
      for (let i = 0; i < strAry2.length; i++) {
        let num = Number(strAry2[i])
        if (num < 0) {
          continue
        }
        PARTY[ptNum].removeItem(num, 2)
      }
    }
    strAry[4] = strAry[4].replace(/<\+>/g, ',')
    strAry[4] = strAry[4].replace(/<\*>/g, '<>')
    let memberNum = PARTY[ptNum].getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      PC[PARTY[ptNum].PartyMember[i]].controlTitle(strAry[4])
    }
    strAry2 = strAry[5].split(',')
    for (let i = 0; i < memberNum; i++) {
      let pcNum = PARTY[ptNum].PartyMember[i]
      let num = Number(strAry2[0])
      PC[pcNum].Exp += num
      num = Number(strAry2[1])
      PC[pcNum].controlGold(num, true)
    }
    let itemNum = Number(strAry[9])
    if (itemNum > -1) {
      let decided = 0
      if (
        (ITEM[itemNum].DECIDED == 0 && GameData['ITEM_DECIDED']) ||
        ITEM[itemNum].DECIDED == 1
      ) {
        decided = 1
      }
      if (PARTY[ptNum].putItem(itemNum, decided) > -1) {
        if (decided == 1) {
          PlayData['ItemFlag'][itemNum] = true
        }
      }
    }
    strAry[6] = strAry[6].replace(/<\+>/g, '<>')
    controlFlag(strAry[6])
    PARTY[ptNum].check()
    if (strAry[7].match(/^(| )$/)) {
      saveData()
      deleteTempVariable()
      GameState = 'castleTownStart'
      townAction()
      return
    }
    if (strAry[2] == 'none') {
      strAry[2] = ''
    }
    if (strAry[2] == '') {
      musicStop()
    } else {
      musicPlay(strAry[2])
    }
    if (strAry[10].match(/^(| )$/)) {
      strAry[10] = 'castleTown'
    }
    strAry[10] = 'graphic/bg/' + strAry[10]
    MP.clearMainWindow()
    MP.clearTextSurface('all')
    MP.viewPartyStatus()
    MP.drawFrame_Center_Title(
      MP.MainSurface,
      GameData['Castle'],
      GraphicData[strAry[10]]
    )
    MP.setMessage(strAry[7], strAry[8])
    GameState = 'castle2Return'
    return
  } else if (GameState == 'castle2') {
    saveData()
    deleteTempVariable()
    GameState = 'castleTownStart'
    townAction()
    return
  } else if (GameState == 'edgeOfTown') {
    if (key == 'cancel') {
      key = 'enter'
      value = 'returnCastleTown'
    }
    if (key == 'enter') {
      if (value == 'maze') {
        if (MP.checkConditionAndViewMessage('NO_ONE_IN_PARTY')) {
          GameState = 'edgeOfTownStartReturn'
          return
        }
        if (MP.checkConditionAndViewMessage('NO_DUNGEON')) {
          GameState = 'edgeOfTownStartReturn'
          return
        }
        if (DUNGEON.DUNGEON_MAX == 1) {
          MP.SelectMode['valueAry'][MP.SelectMode['select']] = '0'
          GameState = 'maze'
          townAction('enter')
          return
        } else {
          TempVariable['dungeonList'] = []
          for (let i = 0; i < DUNGEON.DUNGEON_MAX; i++) {
            let formula = replaceFormula(DUNGEON.DUNGEON_CONDITION[i])
            if (strCalculation(formula) != 0) {
              TempVariable['dungeonList'].push(i)
            }
          }
          if (MP.checkConditionAndViewMessage('NO_DUNGEON2')) {
            deleteTempVariable()
            GameState = 'edgeOfTownStartReturn'
            return
          }
          GameState = 'maze'
          townAction()
          return
        }
      } else if (value == 'restart') {
        TempVariable['pcInMaze'] = []
        for (let i = 0; i < PlayData['PcMax']; i++) {
          let pcNum = PlayData['PcList'][i]
          let ptNum = PC[pcNum].PartyNum
          if (ptNum > -1 && PC[pcNum].State < 2) {
            if (PARTY[ptNum].DungeonNumber > -1) {
              TempVariable['pcInMaze'].push(pcNum)
            }
          }
        }
        if (MP.checkConditionAndViewMessage('NO_PC_IN_MAZE')) {
          deleteTempVariable()
          GameState = 'edgeOfTownStartReturn'
          return
        }
        GameState = 'restart'
        townAction()
        return
      } else if (value == 'training') {
        saveData()
        if (PlayData['ActiveParty'] > -1) {
          PARTY[PlayData['ActiveParty']].dissolution()
        }
        GameState = 'trainingStart'
        townAction()
        return
      } else if (value == 'itemCatalog') {
        TempVariable['list'] = []
        TempVariable['listStr'] = []
        let lastNum = -1
        for (let i = 0; i < ITEM.length; i++) {
          if (!ITEM[i].NOT_DISPLAYED) {
            let str = MP.strFitLength(i, 4, 'right') + ': '
            if (PlayData['ItemFlag'][i]) {
              lastNum = i
              TempVariable['list'].push(i + 1)
              str += MP.strFitLength(ITEM[i].NAME[1], 24)
              if (!GameData['ITEM_NOT_NAME_UNDECIDED']) {
                let str2 = ITEM[i].NAME[0]
                if (str2 != '') {
                  str2 = '[' + str2 + ']'
                }
                str += MP.strFitLength(str2, 22)
              }
            } else {
              TempVariable['list'].push(-1 * (i + 1))
            }
            TempVariable['listStr'].push(str)
          }
        }
        if (lastNum < 0) {
          GameState = 'edgeOfTownStart'
          townAction()
          return
        } else {
          TempVariable['list'].splice(lastNum + 1)
          TempVariable['listStr'].splice(lastNum + 1)
          TempVariable['list2'] = []
          for (let i = 0; i < TempVariable['list'].length; i++) {
            if (TempVariable['list'][i] > 0) {
              TempVariable['list2'].push(TempVariable['list'][i])
            }
          }
          GameState = 'itemCatalog'
          townAction()
          return
        }
      } else if (value == 'monsterCatalog') {
        TempVariable['list'] = []
        TempVariable['listStr'] = []
        let lastNum = -1
        for (let i = 0; i < MONSTER_DATA.length; i++) {
          if (!MONSTER_DATA[i].NOT_DISPLAYED) {
            let str = MP.strFitLength(i, 4, 'right') + ': '
            if (PlayData['MonsterFlag'][i]) {
              lastNum = i
              TempVariable['list'].push(i + 1)
              str += MP.strFitLength(MONSTER_DATA[i].NAME[1], 24)
              if (!GameData['MONSTER_NOT_NAME_UNDECIDED']) {
                let str2 = MONSTER_DATA[i].NAME[0]
                if (str2 != MONSTER_DATA[i].NAME[1]) {
                  str2 = '[' + str2 + ']'
                }
                str += MP.strFitLength(str2, 22)
              }
            } else {
              TempVariable['list'].push(-1 * (i + 1))
            }
            TempVariable['listStr'].push(str)
          }
        }
        if (lastNum < 0) {
          GameState = 'edgeOfTownStart'
          townAction()
          return
        } else {
          TempVariable['list'].splice(lastNum + 1)
          TempVariable['listStr'].splice(lastNum + 1)
          TempVariable['list2'] = []
          for (let i = 0; i < TempVariable['list'].length; i++) {
            if (TempVariable['list'][i] > 0) {
              TempVariable['list2'].push(TempVariable['list'][i])
            }
          }
          GameState = 'monsterCatalog'
          townAction()
          return
        }
      } else if (value == 'returnCastleTown') {
        GameState = 'castleTownStart'
        townAction()
        return
      }
    }
    MP.clearTextSurface('all')
    MP.TopSurface.clear()
    selAry.push(getDefaultMessage('MAZE', 1))
    valueAry.push('maze')
    let restart = true
    if (!GameData['LOAD_RESTART']) {
      restart = false
      for (let i = 0; i < PlayData['PcMax']; i++) {
        let ptNum = PC[PlayData['PcList'][i]].PartyNum
        if (ptNum > -1 && PC[PlayData['PcList'][i]].State < 2) {
          if (PARTY[ptNum].DungeonNumber > -1) {
            restart = true
            break
          }
        }
      }
    }
    if (restart) {
      selAry.push(getDefaultMessage('RESTART', 1))
      valueAry.push('restart')
    }
    selAry.push(getDefaultMessage('TRAINING', 1, 24))
    valueAry.push('training')
    if (GameData['ITEM_CATALOG']) {
      selAry.push(getDefaultMessage('ITEM_CATALOG', 1))
      valueAry.push('itemCatalog')
    }
    if (GameData['MONSTER_CATALOG']) {
      selAry.push(getDefaultMessage('MONSTER_CATALOG', 1))
      valueAry.push('monsterCatalog')
    }
    let strTmp = getDefaultMessage('RETURN_CASTLE_TOWN', 1)
    strTmp = strTmp.replace(/\[castleTown\]/g, GameData['CastleTown'])
    selAry.push(strTmp)
    valueAry.push('returnCastleTown')
    y *= 3
  } else if (GameState == 'maze') {
    if (key == 'cancel') {
      deleteTempVariable()
      GameState = 'edgeOfTownStart'
      townAction()
      return
    } else if (key == 'enter') {
      deleteTempVariable()
      let dungeonNum = Number(value)
      let ptNum = PlayData['ActiveParty']
      let pt = PARTY[ptNum]
      pt.DungeonNumber = dungeonNum
      pt.Floor = DUNGEON.StartFloor[dungeonNum]
      pt.X = DUNGEON.StartPointX[dungeonNum]
      pt.Y = DUNGEON.StartPointY[dungeonNum]
      pt.Direction = DUNGEON.StartDirection[dungeonNum]
      pt.PreX = pt.X
      pt.PreY = pt.Y
      DUNGEON.checkMapFlag()
      DUNGEON.controlCheckedMonsterRoom(false)
      controlFlag(DUNGEON.StartFlag[dungeonNum], false)
      controlFlag(DUNGEON.DungeonFlag[dungeonNum][pt.Floor], false)
      let space = DUNGEON.Space[pt.DungeonNumber][pt.Floor][pt.X][pt.Y]
      if (GameData['DO_NOT_OPEN_CAMP'] || space == 'a') {
        GameState = 'moveStart'
        dungeonAction('step')
      } else {
        GameState = 'campStart'
        dungeonAction()
      }
      return
    }
    for (let i = 0; i < TempVariable['dungeonList'].length; i++) {
      let dungeonNum = TempVariable['dungeonList'][i]
      selAry.push(DUNGEON.DungeonName[dungeonNum])
      valueAry.push(String(dungeonNum))
    }
    y *= 3
  } else if (GameState == 'restart') {
    if (key == 'cancel') {
      deleteTempVariable()
      GameState = 'edgeOfTownStart'
      townAction()
      return
    } else if (key == 'enter') {
      deleteTempVariable()
      let pcNum = Number(value)
      if (PlayData['ActiveParty'] > -1) {
        PARTY[PlayData['ActiveParty']].dissolution()
      }
      PlayData['ActiveParty'] = PC[pcNum].PartyNum
      let pt = PARTY[PlayData['ActiveParty']]
      pt.PreX = pt.X
      pt.PreY = pt.Y
      DUNGEON.controlCheckedMonsterRoom(false)
      let roomNum = DUNGEON.MonsterRoom[pt.DungeonNumber][pt.Floor][pt.X][pt.Y]
      if (roomNum > -1) {
        DUNGEON.CheckedMonsterRoom[roomNum] = true
      }
      let space = DUNGEON.Space[pt.DungeonNumber][pt.Floor][pt.X][pt.Y]
      if (space == 'a') {
        GameState = 'move'
        dungeonAction('step')
      } else {
        GameState = 'campStart'
        dungeonAction()
      }
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('RESTART_PARTY', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < TempVariable['pcInMaze'].length; i++) {
      let pcNum = TempVariable['pcInMaze'][i]
      selAry.push(PC[pcNum].nameListStr(true))
      valueAry.push(String(pcNum))
    }
    y *= 6
    lineNum = 10
  } else if (GameState == 'training') {
    if (key == 'cancel') {
      key = 'enter'
      value = 'leave'
    }
    if (key == 'enter') {
      if (value == 'create') {
        if (MP.checkConditionAndViewMessage('FACILITIES_FULL')) {
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingCreateName'
        townAction()
        return
      } else if (value == 'inspect') {
        if (MP.checkConditionAndViewMessage('NO_ONE')) {
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingInspect'
        townAction()
        return
      } else if (value == 'delete') {
        if (PlayData['PcMax'] < 1) {
          GameState = 'trainingDeleteInitialize'
        } else {
          GameState = 'trainingDelete'
        }
        townAction()
        return
      } else if (value == 'changeName') {
        if (MP.checkConditionAndViewMessage('NO_ONE')) {
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingChangeName'
        townAction()
        return
      } else if (value == 'changeClass') {
        if (MP.checkConditionAndViewMessage('NO_ONE')) {
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingChangeClass'
        townAction()
        return
      } else if (value == 'sort') {
        if (MP.checkConditionAndViewMessage('NO_ONE')) {
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingSort'
        townAction()
        return
      } else if (value == 'registration') {
        if (MP.checkConditionAndViewMessage('FACILITIES_FULL')) {
          GameState = 'trainingReturn'
          return
        }
        eventMouseup()
        uploadTextFile('chr', readEndAction)
      } else if (value == 'transmigration') {
        if (MP.checkConditionAndViewMessage('NO_ONE')) {
          GameState = 'trainingReturn'
          return
        }
        TempVariable['pcAry'] = []
        for (let i = 0; i < PlayData['PcMax']; i++) {
          let pcNum = PlayData['PcList'][i]
          if (
            strCalculation(replaceFormula(GameData['TM'], [['pc', pcNum]])) != 0
          ) {
            TempVariable['pcAry'].push(pcNum)
          }
        }
        if (MP.checkConditionAndViewMessage('NO_ONE_CAN_DO')) {
          deleteTempVariable()
          GameState = 'trainingReturn'
          return
        }
        GameState = 'trainingTransmigration'
        townAction()
        return
      } else if (value == 'leave') {
        saveData()
        GameState = 'edgeOfTownStart'
        townAction()
        return
      }
    }
    MP.clearTextSurface('all')
    selAry.push(getDefaultMessage('CREATE', 1))
    valueAry.push('create')
    selAry.push(getDefaultMessage('TRAINING_INSPECT', 1))
    valueAry.push('inspect')
    selAry.push(getDefaultMessage('DELETE', 1))
    valueAry.push('delete')
    selAry.push(getDefaultMessage('CHANGE_NAME', 1))
    valueAry.push('changeName')
    if (GameData['CLASS_CHANGE']) {
      selAry.push(getDefaultMessage('CHANGE_CLASS', 1))
      valueAry.push('changeClass')
    }
    selAry.push(getDefaultMessage('SORTING', 1))
    valueAry.push('sort')
    if (GameData['REG_TM_FLAG']) {
      selAry.push(
        getDefaultMessage('REGISTRATION_OF_TRANSMIGRATION_CHARACTER', 1)
      )
      valueAry.push('registration')
    }
    if (GameData['TM_FLAG']) {
      selAry.push(getDefaultMessage('TRANSMIGRATION_OF_CHARACTER', 1))
      valueAry.push('transmigration')
    }
    let strTmp = getDefaultMessage('TRAINING_LEAVE', 1)
    strTmp = strTmp.replace(/\[edgeOfTown\]/g, GameData['EdgeOfTown'])
    selAry.push(strTmp)
    valueAry.push('leave')
    y *= 3
  } else if (GameState == 'trainingCreateName') {
    if (key == 'enter') {
      TempVariable['name'] = MP.strCut(PlayData['InputText'], 20)
      GameState = 'trainingCreateName2'
      townAction()
      return
    }
    GenericVariable['FullKeyInvalid'] = true
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('INPUT_NAME', 1),
      'center',
      MP.LINE_HEIGHT * 5
    )
    MP.controlInputText('set')
    GenericVariable['ReturnKeyControll'] = 0
    return
  } else if (GameState == 'trainingCreateName2') {
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        GameState = 'trainingCreateRace'
        townAction()
        return
      } else {
        GameState = 'trainingCreateName'
        townAction()
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(TempVariable['name']),
      'center',
      MP.LINE_HEIGHT * 3
    )
    let sameCheck = false
    for (let i = 0; i < PlayData['PcMax']; i++) {
      if (TempVariable['name'] == PC[PlayData['PcList'][i]].Name[0]) {
        sameCheck = true
        break
      }
    }
    if (sameCheck) {
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        getDefaultMessage('SAME_NAME', 1),
        'center',
        MP.LINE_HEIGHT * 6
      )
      GameState = 'trainingCreateReturn'
      return
    }
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('NAME_ENTER', 1),
      'center',
      MP.LINE_HEIGHT * 6
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 9
  } else if (GameState == 'trainingCreateRace') {
    if (key == 'cancel') {
      GameState = 'trainingCreateName'
      townAction()
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
      if (GameData['RACE_SEX_INSIDE'][race] > -1) {
        MP.controlPreSelect('push')
        MP.PreSelect['valueAry'][1] = [0, 1, 2, 3]
        MP.PreSelect['select'][1] = GameData['RACE_SEX_INSIDE'][race]
        GameState = 'trainingCreateAli'
      } else {
        GameState = 'trainingCreateSex'
      }
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(TempVariable['name']),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    selAry.push(GameData['RACE'][0])
    valueAry.push(0)
    for (let i = 1; i < GameData['RACE'].length; i++) {
      if (strCalculation(replaceFormula(GameData['RACE_CONDITION'][i])) != 0) {
        selAry.push(GameData['RACE'][i])
        valueAry.push(String(i))
      }
    }
    comment = 'createRace'
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 24
    y *= 6
    lineNum = 5
  } else if (GameState == 'trainingCreateSex') {
    if (key == 'cancel') {
      MP.controlPreSelect('pop')
      GameState = 'trainingCreateRace'
      townAction('return')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('push')
      GameState = 'trainingCreateAli'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(
        TempVariable['name'],
        MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
      ),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
    MP.TextSurfaceNum++
    let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
    for (let i = 0; i < GameData['SEX'].length; i++) {
      if (GameData['RACE_SEX'][race].indexOf(String(i)) > -1) {
        selAry.push(GameData['SEX'][i])
        valueAry.push(String(i))
      }
    }
    comment = 'createSex'
    align =
      MP.MAIN_X +
      MP.MAIN_WIDTH / 2 -
      (MP.FONT_SIZE / 2) * (24 - MP.PreSelect['charMin'][0])
    y *= 7
  } else if (GameState == 'trainingCreateAli') {
    let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
    if (key == 'cancel') {
      MP.controlPreSelect('pop')
      if (GameData['RACE_SEX_INSIDE'][race] > -1) {
        MP.controlPreSelect('pop')
        GameState = 'trainingCreateRace'
      } else {
        GameState = 'trainingCreateSex'
      }
      townAction('return')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('push')
      GameState = 'trainingCreateAbi'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(
        TempVariable['name'],
        MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]],
        MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
      ),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
    if (GameData['RACE_SEX_INSIDE'][race] < 0) {
      MP.viewPreSelectMode(MP.TextSurfaceNum, 1, 'none')
    }
    MP.TextSurfaceNum++
    for (let i = 0; i < GameData['ALIGNMENT'].length; i++) {
      selAry.push(GameData['ALIGNMENT'][i])
    }
    comment = 'createAli'
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 24
    align +=
      (MP.FONT_SIZE / 2) *
      (MP.PreSelect['charMin'][0] + MP.PreSelect['charMin'][1])
    y *= 8
  } else if (GameState == 'trainingCreateAbi') {
    let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
    let sex = MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
    let ali = MP.PreSelect['valueAry'][2][MP.PreSelect['select'][2]]
    let setAbi = false
    if (key == 'cancel') {
      if (!GameData['BONUS_CANNOT_ROLL_AGAIN']) {
        MP.controlPreSelect('pop')
        GameState = 'trainingCreateAli'
        townAction('return')
        return
      } else {
        setAbi = true
      }
    } else if (key == 'escape') {
      if (GameData['BONUS_CANNOT_ROLL_AGAIN']) {
        setAbi = true
      }
    } else if (key == 'right') {
      if (
        MP.SelectMode['selectF'] > 0 &&
        !GameData['ABILITY_NO_BONUS'][value] &&
        MP.SelectMode['selAry'][MP.SelectMode['select']] <
          TempVariable['abiMax'][value]
      ) {
        MP.SelectMode['selAry'][MP.SelectMode['select']]++
        MP.SelectMode['selectF']--
      }
      setAbi = true
    } else if (key == 'left') {
      if (
        !GameData['ABILITY_NO_BONUS'][value] &&
        MP.SelectMode['selAry'][MP.SelectMode['select']] >
          TempVariable['abiMin'][value]
      ) {
        MP.SelectMode['selAry'][MP.SelectMode['select']]--
        MP.SelectMode['selectF']++
      }
      setAbi = true
    } else if (key == 'enter') {
      if (MP.SelectMode['selectF'] == 0) {
        let abi = TempVariable['abiMin'].slice()
        for (let i = 0; i < MP.SelectMode['valueAry'].length; i++) {
          abi[MP.SelectMode['valueAry'][i]] = MP.SelectMode['selAry'][i]
        }
        TempVariable['classAry'] = []
        for (let i = 0; i < GameData['PC_CLASS'].length; i++) {
          if (enableChangeClass(i, -1, race, sex, ali, abi) == 2) {
            TempVariable['classAry'].push(i)
          }
        }
        if (TempVariable['classAry'].length > 0) {
          MP.controlPreSelect('push')
          GameState = 'trainingCreateClass'
          townAction()
          return
        }
      }
      setAbi = true
    } else if (key == 'return') {
      setAbi = true
    }
    if (setAbi) {
      for (let i = 0; i < MP.SelectMode['selAry'].length; i++) {
        selAry.push(MP.SelectMode['selAry'][i])
      }
      value = MP.SelectMode['select']
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(TempVariable['name'], race, sex, ali),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    if (selAry.length < 1) {
      ;(TempVariable['abiMin'] = []), (TempVariable['abiMax'] = [])
      let bonusMax = 0,
        tmp
      for (let i = 0; i < GameData['ABILITY_DISPLAY'].length; i++) {
        let abi = GameData['ABILITY_DISPLAY'][i]
        let abiMin =
          GameData['RACE_ABI'][race][abi] + GameData['ABILITY_SEX'][sex][abi]
        if (abiMin < 0) {
          abiMin = 0
        }
        TempVariable['abiMin'][abi] = abiMin
        let abiMax
        if (GameData['ABILITY_FIX'] == 0) {
          abiMax = GameData['ABILITY_MAX']
        } else if (GameData['ABILITY_FIX'] == 1) {
          abiMax = GameData['ABILITY_MAX'] + abiMin
        } else {
          let formula = GameData['ABILITY_INDIVIDUAL'][abi].replace(
            /initialAbi/g,
            String(GameData['RACE_ABI'][race][abi])
          )
          formula = enableChangeClassReplace(formula, race, sex, ali)
          formula = replaceFormula(formula, null, true)
          abiMax = Math.floor(strCalculation(formula))
          if (GameData['ABILITY_INDIVIDUAL_SEX'][abi]) {
            abiMax += GameData['ABILITY_SEX'][sex][abi]
          }
        }
        if (abiMax < 0) {
          abiMax = 0
        } else if (abiMax > 999) {
          abiMax = 999
        }
        TempVariable['abiMax'][abi] = abiMax
        selAry.push(abiMin)
        if (GameData['ABILITY_NO_BONUS'][abi]) {
          continue
        }
        tmp = TempVariable['abiMax'][abi] - abiMin
        if (tmp < 0) {
          tmp = 0
        } else if (tmp > 999) {
          tmp = 999
        }
        bonusMax += tmp
      }
      let bonus = 0
      let bonusDiceNum = enableChangeClassReplace(
        GameData['BONUS_DICE_NUM'],
        race,
        sex,
        ali,
        null,
        true
      )
      let bonusDice = enableChangeClassReplace(
        GameData['BONUS_DICE'],
        race,
        sex,
        ali,
        null,
        true
      )
      let bonusDicePlus = enableChangeClassReplace(
        GameData['BONUS_DICE_PLUS'],
        race,
        sex,
        ali,
        null,
        true
      )
      bonusDiceNum = replaceFormula(bonusDiceNum, null, true)
      bonusDice = replaceFormula(bonusDice, null, true)
      bonusDicePlus = replaceFormula(bonusDicePlus, null, true)
      let bonusDiceNumInt = Math.floor(strCalculation(bonusDiceNum))
      let bonusDiceInt = Math.floor(strCalculation(bonusDice))
      let bonusDicePlusInt = Math.floor(strCalculation(bonusDicePlus))
      tmp = bonusDiceNumInt * bonusDiceInt + bonusDicePlusInt
      if (tmp > 0) {
        while (true) {
          let num = dice(bonusDiceNumInt, bonusDiceInt) + bonusDicePlusInt
          bonus += num
          if (bonus >= bonusMax) {
            bonus = bonusMax
            break
          } else if (!GameData['BONUS_PLUS']) {
            break
          } else if (num != tmp) {
            break
          }
        }
      }
      MP.SelectMode['selectF'] = bonus
    }
    for (let i = 0; i < GameData['ABILITY_DISPLAY'].length; i++) {
      valueAry.push(GameData['ABILITY_DISPLAY'][i])
    }
    mode = 'abiSel'
    comment = 'createAbi'
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 25
    y *= 6
  } else if (GameState == 'trainingCreateClass') {
    if (key == 'cancel') {
      MP.controlPreSelect('pop')
      GameState = 'trainingCreateAbi'
      townAction('return')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('push')
      GameState = 'trainingCreateLast'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
    let sex = MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
    let ali = MP.PreSelect['valueAry'][2][MP.PreSelect['select'][2]]
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(TempVariable['name'], race, sex, ali),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.viewPreSelectMode(MP.TextSurfaceNum, 3, 'none')
    MP.TextSurfaceNum++
    for (let i = 0; i < TempVariable['classAry'].length; i++) {
      selAry.push(GameData['PC_CLASS'][TempVariable['classAry'][i]])
      valueAry.push(TempVariable['classAry'][i])
    }
    comment = 'createClass'
    align = MP.MAIN_X + MP.MAIN_WIDTH / 2 + (MP.FONT_SIZE / 2) * 4
    y *= 6
    if (selAry.length > 16) {
      lineNum = 16
    }
  } else if (GameState == 'trainingCreateLast') {
    let race = MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
    let sex = MP.PreSelect['valueAry'][1][MP.PreSelect['select'][1]]
    let ali = MP.PreSelect['valueAry'][2][MP.PreSelect['select'][2]]
    let pcClass = MP.PreSelect['valueAry'][4][MP.PreSelect['select'][4]]
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        let abi = TempVariable['abiMin'].slice()
        for (let i = 0; i < MP.PreSelect['valueAry'][3].length; i++) {
          abi[MP.PreSelect['valueAry'][3][i]] = Number(
            MP.PreSelect['selAry'][3][i]
          )
        }
        let pcNum = getNextPcNum()
        PC[pcNum].initializeVariable()
        PC[pcNum].createPc(TempVariable['name'], sex, race, pcClass, ali, abi)
        if (GameData['PC_CREATE_ITEM'] != '') {
          setItemCreatePC(pcNum)
        }
        PlayData['PcList'][PlayData['PcMax']] = pcNum
        PlayData['PcMax']++
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'create'
        MP.SelectMode['selectF'] = 0
        if (
          GameData['FACE_GRAPHIC_STATUS'] ||
          GameData['FACE_GRAPHIC_BATTLE']
        ) {
          readGraphicFile_Face(null, TempVariable['name'], readEndAction)
        } else {
          GameState = 'training'
          townAction('none')
        }
      } else {
        GameState = 'training'
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'create'
        townAction('none')
      }
      deleteTempVariable()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(TempVariable['name'], race, sex, ali, pcClass),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('CHARACTER_ENTER'),
      'center',
      MP.LINE_HEIGHT * 6
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 9
  } else if (GameState == 'trainingInspect') {
    if (key == 'cancel') {
      GameState = 'training'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'inspect'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      PlayData['StatusAction'] = 'trainingInspect'
      GameState = 'inspect'
      statusAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_INSPECT', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < PlayData['PcMax']; i++) {
      selAry.push(PC[PlayData['PcList'][i]].nameListStr(true))
      valueAry.push(String(PlayData['PcList'][i]))
    }
    y *= 6
    lineNum = 16
  } else if (GameState == 'trainingDelete') {
    if (key == 'cancel') {
      GameState = 'training'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'delete'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      GameState = 'trainingDelete2'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_DELETE', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < PlayData['PcMax']; i++) {
      selAry.push(PC[PlayData['PcList'][i]].nameListStr(true))
      valueAry.push(String(PlayData['PcList'][i]))
    }
    y *= 6
    lineNum = 16
  } else if (GameState == 'trainingDelete2') {
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        let pcNum = Number(
          MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
        )
        deletePc(pcNum)
        if (PlayData['PcMax'] < 1) {
          GameState = 'training'
          MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'delete'
          townAction('none')
          return
        } else {
          MP.controlPreSelect('pop')
          MP.controlSelect('delete')
          GameState = 'trainingDelete'
          townAction('return')
          return
        }
      } else {
        MP.controlPreSelect('pop')
        GameState = 'trainingDelete'
        townAction('return')
        return
      }
    }
    MP.clearTextSurface('all')
    MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('DELETE_CHARACTER', 1),
      'center',
      MP.LINE_HEIGHT * 5
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 8
  } else if (GameState == 'trainingDeleteInitialize') {
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        GenericVariable['FullKeyInvalid'] = true
        localStorage.removeItem(SaveName + 'Save')
        initializePlayData()
        initializeFirstPc()
        checkShopItemListFull()
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'delete'
        MP.SelectMode['selectF'] = 0
        if (
          GameData['FACE_GRAPHIC_STATUS'] ||
          GameData['FACE_GRAPHIC_BATTLE']
        ) {
          let ary = adjustFaceGraphic()
          if (ary.length > 0) {
            MP.paintMask()
            readGraphicFile(ary, GenericVariable['PrioritizeHR'], readEndAction)
          } else {
            GenericVariable['FullKeyInvalid'] = false
            GameState = 'training'
            townAction('none')
          }
        } else {
          GenericVariable['FullKeyInvalid'] = false
          GameState = 'training'
          townAction('none')
        }
        return
      } else {
        GameState = 'training'
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'delete'
        townAction('none')
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('DATA_INITIALIZE'),
      'center',
      MP.LINE_HEIGHT * 5
    )
    MP.TextSurfaceNum++
    value = 1
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 8
  } else if (GameState == 'trainingChangeName') {
    if (key == 'cancel') {
      GameState = 'training'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'changeName'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      GameState = 'trainingChangeName2'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_CHANGE_NAME', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < PlayData['PcMax']; i++) {
      selAry.push(PC[PlayData['PcList'][i]].nameListStr(true))
      valueAry.push(String(PlayData['PcList'][i]))
    }
    y *= 6
    lineNum = 16
  } else if (GameState == 'trainingChangeName2') {
    if (key == 'enter') {
      let newName = MP.strCut(PlayData['InputText'], 20)
      let sameCheck = false
      for (let i = 0; i < PlayData['PcMax']; i++) {
        if (newName == PC[PlayData['PcList'][i]].Name[0]) {
          sameCheck = true
          break
        }
      }
      MP.controlPreSelect('pop')
      if (sameCheck) {
        MP.clearTextSurface('all')
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage('SAME_NAME', 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        GameState = 'trainingChangeNameReturn'
      } else {
        let pcNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
        let oldName = PC[pcNum].Name[0]
        PC[pcNum].Name[0] = newName
        GameState = 'trainingChangeName'
        if (
          (GameData['FACE_GRAPHIC_STATUS'] ||
            GameData['FACE_GRAPHIC_BATTLE']) &&
          PC[pcNum].FaceGraphic.match(/^(| |none)$/)
        ) {
          readGraphicFile_Face(oldName, newName, readEndAction)
        } else {
          townAction('return')
        }
      }
      return
    }
    GenericVariable['FullKeyInvalid'] = true
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('INPUT_NAME', 1),
      'center',
      MP.LINE_HEIGHT * 5
    )
    MP.controlInputText('set')
    GenericVariable['ReturnKeyControll'] = 0
    return
  } else if (GameState == 'trainingChangeClass') {
    if (key == 'cancel') {
      GameState = 'training'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'changeClass'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      let pcNum = Number(MP.SelectMode['valueAry'][MP.SelectMode['select']])
      if (PC[pcNum].State > 1 || PC[pcNum].PartyNum > -1) {
        MP.clearTextSurface('all')
        MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage('CANNOT_CHANGE_CLASS_NOW', 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        GameState = 'trainingChangeClassReturn'
      } else {
        TempVariable['classAry'] = []
        TempVariable['classChangeAry'] = []
        let ck = PC[pcNum].checkCursed()
        for (let i = 0; i < GameData['PC_CLASS'].length; i++) {
          let num = enableChangeClass(i, pcNum)
          if (num > 0) {
            TempVariable['classAry'].push(i)
            if (num == 1 || ck > -1) {
              TempVariable['classChangeAry'].push(false)
            } else {
              TempVariable['classChangeAry'].push(true)
            }
          }
        }
        GameState = 'trainingChangeClass2'
        townAction('start')
      }
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_CHANGE_CLASS', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < PlayData['PcMax']; i++) {
      selAry.push(PC[PlayData['PcList'][i]].nameListStr(true))
      valueAry.push(String(PlayData['PcList'][i]))
    }
    y *= 6
    lineNum = 16
  } else if (GameState == 'trainingChangeClass2') {
    if (key == 'cancel') {
      deleteTempVariable()
      MP.controlPreSelect('pop')
      GameState = 'trainingChangeClass'
      townAction('return')
      return
    } else if (key == 'enter') {
      if (
        GameData['HELP_COMMENT'] ||
        TempVariable['classChangeAry'][MP.SelectMode['select']]
      ) {
        MP.controlPreSelect('push')
        GameState = 'trainingChangeClass3'
        townAction()
        return
      }
    }
    let pcNum = Number(MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]])
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(
        PC[pcNum].Name[0],
        PC[pcNum].Race,
        PC[pcNum].Sex,
        PC[pcNum].Alignment,
        PC[pcNum].PcClass
      ),
      'center',
      MP.LINE_HEIGHT * 3
    )
    colorAry = []
    for (let i = 0; i < TempVariable['classAry'].length; i++) {
      selAry.push(GameData['PC_CLASS'][TempVariable['classAry'][i]])
      valueAry.push(String(TempVariable['classAry'][i]))
      if (TempVariable['classChangeAry'][i]) {
        colorAry.push('white')
      } else {
        colorAry.push('gray')
      }
    }
    if (GameData['HELP_COMMENT']) {
      align = MP.MAIN_X + MP.MAIN_WIDTH / 2 + (MP.FONT_SIZE / 2) * 4
    }
    y *= 6
    if (selAry.length > 16) {
      lineNum = 16
    }
    if (key == 'start' && TempVariable['classChangeAry'].indexOf(true) < 0) {
      MP.setSelectMode(
        null,
        mode,
        selAry,
        valueAry,
        colorAry,
        comment,
        align,
        y,
        0,
        lineNum,
        textAlign,
        value,
        MP.SelectMode['selectF'],
        GameData['SELECT_COLOR']
      )
      MP.controlPreSelect('push')
      MP.viewPreSelectMode(MP.TextSurfaceNum, 1, 'none', -1)
      MP.controlPreSelect('pop')
      let str = ''
      if (PC[pcNum].checkCursed() > -1) {
        str = getDefaultMessage('CURSED', 1)
      } else {
        str = getDefaultMessage('NOT_CHANGE_CLASS', 1)
      }
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        str,
        'center',
        MP.LINE_HEIGHT * 6
      )
      GameState = 'trainingChangeClass2Return'
      return
    }
    comment = 'changeClass'
    MP.TextSurfaceNum++
  } else if (GameState == 'trainingChangeClass3') {
    let pcNum = Number(MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]])
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        let newClass = TempVariable['classAry'][MP.PreSelect['select'][1]]
        let newAge = Math.floor(
          strCalculation(
            replaceFormula(GameData['CLASS_CHANGE_ADD_AGE'], [['pc', pcNum]])
          )
        )
        let newLv = Math.floor(
          strCalculation(
            replaceFormula(GameData['CLASS_CHANGE_LV'], [['pc', pcNum]])
          )
        )
        if (newLv < 1) {
          newLv = 1
        } else if (newLv > 99999) {
          newLv = 99999
        }
        let newHp = Math.floor(
          strCalculation(
            replaceFormula(GameData['CLASS_CHANGE_HP'], [['pc', pcNum]])
          )
        )
        let newAbi = []
        for (let i = 0; i < GameData['ABILITY'].length; i++) {
          if (GameData['CLASS_CHANGE_ABI'][i] == '') {
            newAbi[i] =
              GameData['RACE_ABI'][PC[pcNum].Race][i] +
              GameData['ABILITY_SEX'][PC[pcNum].Sex][i]
          } else {
            newAbi[i] = Math.floor(
              strCalculation(
                replaceFormula(GameData['CLASS_CHANGE_ABI'][i], [['pc', pcNum]])
              )
            )
          }
          let minNum = 1
          if (GameData['ABILITY_NO_DEATH'][i]) {
            minNum = 0
          }
          if (newAbi[i] < minNum) {
            newAbi[i] = minNum
          }
        }
        PC[pcNum].Age += newAge
        PC[pcNum].PcClass = newClass
        if (PC[pcNum].Level != newLv) {
          PC[pcNum].Level = newLv
          let newExp = 0
          if (newLv > 1) {
            let strTmp = GameData['CLASS_NECESSARY_EXP'][newClass].replace(
              /pc\.lv/g,
              String(newLv - 1)
            )
            newExp = Math.floor(
              strCalculation(replaceFormula(strTmp, [['pc', pcNum]], true))
            )
          }
          PC[pcNum].Exp = newExp
        }
        PC[pcNum].NextUpExp = -1
        for (let i = 0; i < newAbi.length; i++) {
          PC[pcNum].Ability0[i] = newAbi[i]
        }
        PC[pcNum].removeEquip()
        for (let i = 0; i < GameData['SPELL_KIND']; i++) {
          for (let j = 0; j < GameData['SPELL_LVMAX']; j++) {
            PC[pcNum].MpMax[i][j] = 0
          }
        }
        for (let i = 1; i <= newLv; i++) {
          PC[pcNum].Level = i
          PC[pcNum].learnedSpell()
          PC[pcNum].gainedMp()
        }
        if (GameData['CLASS_CHANGE_HP'] == '') {
          PC[pcNum].check()
          newHp = Math.floor(
            strCalculation(
              replaceFormula(GameData['CLASS_HP_ADD'][PC[pcNum].PcClass], [
                ['pc', pcNum]
              ])
            )
          )
        }
        PC[pcNum].HpMax0 = newHp
        PC[pcNum].check()
        deleteTempVariable()
        MP.controlPreSelect('pop')
        MP.controlPreSelect('pop')
        GameState = 'trainingChangeClass'
        townAction('return')
        return
      } else {
        MP.controlPreSelect('pop')
        GameState = 'trainingChangeClass2'
        townAction('return')
        return
      }
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      createPcStr(
        PC[pcNum].Name[0],
        PC[pcNum].Race,
        PC[pcNum].Sex,
        PC[pcNum].Alignment,
        PC[pcNum].PcClass
      ),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.viewPreSelectMode(MP.TextSurfaceNum, 1, 'none')
    if (GameData['HELP_COMMENT']) {
      let newClass = TempVariable['classAry'][MP.PreSelect['select'][1]]
      let str = '[' + getDefaultMessage('CONDITION', 1, 9) + ']' + '\n'
      let count = 0
      for (let i = 0; i < GameData['ALIGNMENT_ABBR'].length; i++) {
        if (GameData['CLASS_ALI'][newClass][i]) {
          if (count > 0) {
            str += ','
          }
          str += GameData['ALIGNMENT_ABBR'][i]
          count++
        }
      }
      str += '\n'
      let sex = PC[pcNum].Sex
      let race = PC[pcNum].Race
      let rFlag = true
      if (GameData['RACE_SEX_INSIDE'][race] > -1) {
        if (GameData['CLASS_SEX'][newClass][sex]) {
          rFlag = false
        }
      }
      if (rFlag) {
        count = 0
        for (let i = 0; i < GameData['SEX_ABBR'].length; i++) {
          if (GameData['CLASS_SEX'][newClass][i]) {
            if (count > 0) {
              str += ','
            }
            str += GameData['SEX_ABBR'][i]
            count++
          }
        }
      }
      str += '\n'
      str += MP.strFitLength(getDefaultMessage('ITEM_LIMIT', 1), 8) + ':'
      let itemMaxNum =
        GameData['RACE_ITEM'][race] + GameData['CLASS_ITEM'][newClass]
      if (itemMaxNum < 1) {
        itemMaxNum = 1
      } else if (itemMaxNum > 99) {
        itemMaxNum = 99
      }
      str += MP.strFitLength(String(itemMaxNum), 2, 'right') + '\n'
      for (let i = 0; i < GameData['ABILITY_DISPLAY'].length; i++) {
        let abi = GameData['ABILITY_DISPLAY'][i]
        str += '\n'
        str += MP.strFitLength(GameData['ABILITY_ABBR'][abi], 6, 'right') + ':'
        let strTmp = ''
        if (GameData['CLASS_ABI'][newClass][abi] > -1) {
          strTmp = String(GameData['CLASS_ABI'][newClass][abi])
        }
        str += MP.strFitLength(strTmp, 3, 'right')
      }
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        str,
        MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 25,
        MP.LINE_HEIGHT * 6,
        11
      )
      str = getDefaultMessage('AGE', 1, 6) + ':'
      str += MP.strFitLength(String(PC[pcNum].Age), 3, 'right') + '\n'
      str += GameData['ALIGNMENT'][PC[pcNum].Alignment] + '\n'
      if (GameData['RACE_SEX_INSIDE'][race] > -1) {
        if (!GameData['CLASS_SEX'][newClass][sex]) {
          str += '(' + GameData['SEX'][sex] + ')'
        }
      } else {
        str += GameData['SEX'][sex]
      }
      str += '\n'
      str += MP.strFitLength(getDefaultMessage('ITEM_NUM', 1), 8) + ':'
      str +=
        MP.strFitLength(String(PC[pcNum].haveItemNum(-1)), 2, 'right') + '\n'
      for (let i = 0; i < GameData['ABILITY_DISPLAY'].length; i++) {
        let abi = GameData['ABILITY_DISPLAY'][i]
        str += '\n'
        str += MP.strFitLength(GameData['ABILITY_ABBR'][abi], 6, 'right') + ':'
        str += MP.strFitLength(String(PC[pcNum].Ability0[abi]), 3, 'right')
      }
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        str,
        MP.MAIN_X + MP.MAIN_WIDTH / 2 - (MP.FONT_SIZE / 2) * 11,
        MP.LINE_HEIGHT * 6,
        11
      )
    }
    if (!TempVariable['classChangeAry'][MP.PreSelect['select'][1]]) {
      MP.controlPreSelect('pop')
      GameState = 'trainingChangeClass2Return'
      return
    }
    let str = getDefaultMessage('CHANGE_CLASS_ENTER', 1).replace(
      /\[class\]/g,
      GameData['PC_CLASS'][TempVariable['classAry'][MP.PreSelect['select'][1]]]
    )
    str = MP.strChangeLine(str, 48, 12, true)
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    if (GameData['HELP_COMMENT']) {
      align = MP.MAIN_X + MP.MAIN_WIDTH / 2 + (MP.FONT_SIZE / 2) * 3
    }
    y *= 5 + MP.strGetLineNum(str)
  } else if (GameState == 'trainingSort') {
    if (key == 'cancel') {
      if (TempVariable['newList'].length < 1) {
        deleteTempVariable()
        GameState = 'training'
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'sort'
        townAction('none')
        return
      }
      let pcNum = TempVariable['newList'].pop()
      let listNum = TempVariable['newList2'].pop()
      value = MP.controlSelect(
        'add',
        listNum,
        PC[pcNum].nameListStr(true),
        String(pcNum)
      )
    } else if (key == 'enter') {
      let sel = MP.SelectMode['select']
      TempVariable['newList'].push(Number(MP.SelectMode['valueAry'][sel]))
      TempVariable['newList2'].push(sel)
      value = MP.controlSelect('delete')
      if (MP.SelectMode['selAry'].length < 1) {
        for (let i = 0; i < TempVariable['newList'].length; i++) {
          PlayData['PcList'][i] = TempVariable['newList'][i]
        }
        deleteTempVariable()
        GameState = 'training'
        MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'sort'
        townAction('none')
        return
      }
    } else {
      MP.SelectMode['selAry'] = []
      MP.SelectMode['valueAry'] = []
      for (let i = 0; i < PlayData['PcMax']; i++) {
        MP.SelectMode['selAry'].push(
          PC[PlayData['PcList'][i]].nameListStr(true)
        )
        MP.SelectMode['valueAry'].push(String(PlayData['PcList'][i]))
      }
      ;(TempVariable['newList'] = []), (TempVariable['newList2'] = [])
    }
    MP.clearTextSurface('all')
    let str = ''
    let startNum = TempVariable['newList'].length - 9
    if (startNum < 0) {
      startNum = 0
    }
    for (let i = startNum; i < TempVariable['newList'].length; i++) {
      if (str != '') {
        str += '\n'
      }
      str += MP.strFitLength(i + 1, 3, 'right') + ': '
      str += PC[TempVariable['newList'][i]].nameListStr(true)
    }
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 14,
      49,
      9
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < MP.SelectMode['selAry'].length; i++) {
      selAry.push(MP.SelectMode['selAry'][i])
      valueAry.push(MP.SelectMode['valueAry'][i])
    }
    y *= 3
    lineNum = 9
  } else if (GameState == 'trainingTransmigration') {
    if (key == 'cancel') {
      deleteTempVariable()
      GameState = 'training'
      MP.SelectMode['valueAry'][MP.SelectMode['select']] = 'transmigration'
      townAction('none')
      return
    } else if (key == 'enter') {
      MP.controlPreSelect('clear')
      MP.controlPreSelect('push')
      GameState = 'trainingTransmigration2'
      townAction()
      return
    }
    MP.clearTextSurface('all')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('WHO_TRANSMIGRATES', 1),
      'center',
      MP.LINE_HEIGHT * 3
    )
    MP.TextSurfaceNum++
    for (let i = 0; i < TempVariable['pcAry'].length; i++) {
      selAry.push(PC[TempVariable['pcAry'][i]].nameListStr(true))
      valueAry.push(String(TempVariable['pcAry'][i]))
    }
    y *= 6
    lineNum = 16
  } else if (GameState == 'trainingTransmigration2') {
    if (key == 'cancel') {
      key = 'enter'
      value = 1
    }
    if (key == 'enter') {
      if (value == 0) {
        let pcNum = Number(
          MP.PreSelect['valueAry'][0][MP.PreSelect['select'][0]]
        )
        let fileName = checkFileName(
          GameData['GAME_TITLE'] + '_' + PC[pcNum].Name[0]
        )
        fileName += '.chr'
        let outStr = GameData['READ_KEYWORD'] + '<*>'
        outStr += PC[pcNum].Name[0] + '<*>'
        outStr += GameData['RACE'][PC[pcNum].Race] + '<->'
        outStr += GameData['RACE_ABBR'][PC[pcNum].Race] + '<*>'
        outStr += GameData['PC_CLASS'][PC[pcNum].PcClass] + '<->'
        outStr += GameData['PC_CLASS_ABBR'][PC[pcNum].PcClass] + '<*>'
        outStr += String(PC[pcNum].Sex) + '<*>'
        outStr += String(PC[pcNum].Alignment) + '<*>'
        outStr += String(PC[pcNum].Age) + '<*>'
        for (let i = 0; i < GameData['ABILITY'].length; i++) {
          if (i > 0) {
            outStr += '<+>'
          }
          outStr += GameData['ABILITY'][i] + '<->'
          outStr += GameData['ABILITY_ABBR'][i] + '<->'
          outStr += String(PC[pcNum].Ability0[i])
        }
        outStr += '<*>' + String(PC[pcNum].Level) + '<*>'
        outStr += String(PC[pcNum].Gold) + '<*>'
        outStr += PC[pcNum].Title + '<*>'
        let loop = PC[pcNum].haveItemNum(-1)
        if (loop < 1) {
          outStr += '-1'
        } else {
          for (let i = 0; i < loop; i++) {
            if (i > 0) {
              outStr += '<->'
            }
            outStr += String(PC[pcNum].Item[i])
          }
        }
        PC[pcNum].Transmigrates = outStr
        saveData()
        MP.clearTextSurface('all')
        MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
        MP.drawTextFrame(
          MP.TextSurface[MP.TextSurfaceNum],
          getDefaultMessage('SAVED_TRANSMIGRATION', 1),
          'center',
          MP.LINE_HEIGHT * 6
        )
        downloadTextFile(fileName, base64.encode(outStr, 1))
        MP.controlPreSelect('pop')
        GameState = 'trainingTransmigrationReturn'
        return
      } else {
        MP.controlPreSelect('pop')
        GameState = 'trainingTransmigration'
        townAction('return')
        return
      }
    }
    MP.clearTextSurface('all')
    MP.viewPreSelectMode(MP.TextSurfaceNum, 0, 'none')
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      getDefaultMessage('TRANSMIGRATE_CHARACTER', 1),
      'center',
      MP.LINE_HEIGHT * 5
    )
    MP.TextSurfaceNum++
    selAry.push(getDefaultMessage('YES', 1))
    selAry.push(getDefaultMessage('NO', 1))
    y *= 8
  } else if (GameState == 'itemCatalog') {
    if (key == 'cancel') {
      deleteTempVariable()
      GameState = 'edgeOfTownStart'
      townAction()
      return
    } else if (key == 'enter') {
      value = Number(value)
      if (value > 0) {
        let itemNum = value - 1
        let item = ITEM[itemNum]
        if (item.COMMENT == '') {
          value = String(value)
        } else {
          TempVariable['CatalogTextMax'] = item.COMMENT.split('<p>').length
          TempVariable['CatalogTextNum'] = 0
          MP.controlPreSelect('clear')
          MP.controlPreSelect('push')
          GameState = 'itemCatalog2'
          townAction()
          return
        }
      } else {
        value = String(value)
      }
    }
    for (let i = 0; i < TempVariable['list'].length; i++) {
      selAry.push(TempVariable['listStr'][i])
      valueAry.push(String(TempVariable['list'][i]))
    }
    lineNum = 17
    comment = 'itemCatalog'
  } else if (GameState == 'itemCatalog2') {
    if (key == 'cancel') {
      value = MP.SelectMode['valueAry'][MP.SelectMode['select']]
      MP.controlPreSelect('pop')
      MP.SelectMode['select'] = MP.SelectMode['valueAry'].indexOf(value)
      GameState = 'itemCatalog'
      townAction('return')
      return
    }
    value = MP.SelectMode['valueAry'][MP.SelectMode['select']]
    let itemNum = Number(value) - 1
    let item = ITEM[itemNum]
    MP.clearTextSurface('all')
    MP.TopSurface.clear()
    let str = MP.strFitLength(itemNum, 4, 'right') + ': '
    str += MP.strFitLength(item.NAME[1], 24)
    if (!GameData['ITEM_NOT_NAME_UNDECIDED']) {
      let str2 = item.NAME[0]
      if (str2 != '') {
        str2 = '[' + str2 + ']'
      }
      str += MP.strFitLength(str2, 22)
    }
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 1
    )
    let strAry = item.COMMENT.split('<p>')
    let scroll = ''
    if (TempVariable['CatalogTextNum'] > 0) {
      scroll += 'up'
    }
    if (TempVariable['CatalogTextNum'] < strAry.length - 1) {
      scroll += 'down'
    }
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      strAry[TempVariable['CatalogTextNum']],
      'center',
      MP.LINE_HEIGHT * 5,
      54,
      5,
      '',
      '',
      -1,
      '',
      scroll
    )
    for (let i = 0; i < TempVariable['list2'].length; i++) {
      let tmpStr = String(TempVariable['list2'][i])
      selAry.push(tmpStr)
      valueAry.push(tmpStr)
    }
    mode = 'itemCatalog'
  } else if (GameState == 'monsterCatalog') {
    if (key == 'cancel') {
      deleteTempVariable()
      GameState = 'edgeOfTownStart'
      townAction()
      return
    } else if (key == 'enter') {
      value = Number(value)
      if (value > 0) {
        MP.controlPreSelect('clear')
        MP.controlPreSelect('push')
        let monNum = value - 1
        let mData = MONSTER_DATA[monNum]
        if (mData.COMMENT == '') {
          TempVariable['CatalogTextMax'] = 0
        } else {
          TempVariable['CatalogTextMax'] = mData.COMMENT.split('<p>').length
        }
        TempVariable['CatalogTextNum'] = 0
        GameState = 'monsterCatalog2'
        townAction()
        return
      } else {
        value = String(value)
      }
    }
    for (let i = 0; i < TempVariable['list'].length; i++) {
      selAry.push(TempVariable['listStr'][i])
      valueAry.push(String(TempVariable['list'][i]))
    }
    lineNum = 23
    comment = 'monster'
  } else if (GameState == 'monsterCatalog2') {
    if (key == 'cancel') {
      MP.drawFrame_Center_Title(
        MP.MainSurface,
        GameData['EdgeOfTown'],
        GraphicData['graphic/bg/edgeOfTown']
      )
      MP.viewPartyStatus()
      value = MP.SelectMode['valueAry'][MP.SelectMode['select']]
      MP.controlPreSelect('pop')
      MP.SelectMode['select'] = MP.SelectMode['valueAry'].indexOf(value)
      GameState = 'monsterCatalog'
      townAction('return')
      return
    }
    value = MP.SelectMode['valueAry'][MP.SelectMode['select']]
    let monNum = Number(value) - 1
    MP.paintMask('clear')
    MP.TopSurface.clear()
    let monsterAry = checkGraphic_Monster([monNum])
    if (monsterAry.length > 0) {
      readGraphicFile_Monster(monsterAry, townAction)
      return
    }
    MP.clearMainWindow()
    let num = TempVariable['list'].indexOf(Number(value))
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      TempVariable['listStr'][num],
      'center',
      MP.LINE_HEIGHT * 2
    )
    let mData = MONSTER_DATA[monNum]
    let w = Math.floor(MP.MAIN_WIDTH / 2),
      y
    if (mData.COMMENT != '') {
      let strAry = mData.COMMENT.split('<p>')
      let scroll = ''
      if (TempVariable['CatalogTextNum'] > 0) {
        scroll += 'up'
      }
      if (TempVariable['CatalogTextNum'] < strAry.length - 1) {
        scroll += 'down'
      }
      MP.drawTextFrame(
        MP.TextSurface[MP.TextSurfaceNum],
        strAry[TempVariable['CatalogTextNum']],
        'center',
        MP.LINE_HEIGHT * 5,
        54,
        6,
        '',
        '',
        -1,
        '',
        scroll
      )
      y = MP.MAIN_Y + MP.MAIN_HEIGHT - w
    } else {
      y = MP.MAIN_Y + MP.MAIN_HEIGHT / 2 - w / 4
    }
    let surface = MP.TextSurface[MP.TextSurfaceNum]
    if (mData.NAME[1] == mData.NAME[0]) {
      let x = MP.MAIN_X + MP.MAIN_WIDTH / 2 - w / 2
      MP.paintGraphic(surface, GraphicData[mData.ConfirmedCG[1]], x, y, w, w)
    } else {
      MP.paintGraphic(surface, GraphicData[mData.ConfirmedCG[1]], 0, y, w, w)
      MP.paintGraphic(surface, GraphicData[mData.ConfirmedCG[0]], w, y, w, w)
    }
    for (let i = 0; i < TempVariable['list2'].length; i++) {
      let tmpStr = String(TempVariable['list2'][i])
      selAry.push(tmpStr)
      valueAry.push(tmpStr)
    }
    mode = 'monsterCatalog'
  }
  MP.setSelectMode(
    townAction,
    mode,
    selAry,
    valueAry,
    colorAry,
    comment,
    align,
    y,
    0,
    lineNum,
    textAlign,
    value,
    MP.SelectMode['selectF'],
    GameData['SELECT_COLOR']
  )
  function createPcStr (name, race, sex, ali, pcClass) {
    let result = MP.strFitLength(name, 22)
    let str
    if (sex == undefined || sex == null) {
      str = '????????'
    } else {
      str = GameData['SEX'][sex]
      if (race != undefined && race != null) {
        if (GameData['RACE_SEX_INSIDE'][race] > -1) {
          str = ''
        }
      }
    }
    result += MP.strFitLength(str, 9)
    if (race == undefined || race == null) {
      str = '????'
    } else {
      str = GameData['RACE_ABBR'][race]
    }
    result += MP.strFitLength(str, 4, 'right')
    if (ali == undefined || ali == null) {
      str = '?'
    } else {
      str = GameData['ALIGNMENT_ABBR'][ali]
    }
    result += '-' + str + '-'
    if (pcClass == undefined || pcClass == null) {
      str = '????'
    } else {
      str = GameData['PC_CLASS_ABBR'][pcClass]
    }
    result += MP.strFitLength(str, 4)
    return result
  }
  function drawShopWelcome (pc) {
    let str = getDefaultMessage('WELCOME', 1)
    str = str.replace(/\[name\]/g, pc.Name[0])
    MP.drawTextFrame(
      MP.TextSurface[MP.TextSurfaceNum],
      str,
      'center',
      MP.LINE_HEIGHT * 3
    )
  }
  function getNextPcNumInParty (pcNumInParty) {
    let ptNum = PlayData['ActiveParty']
    let memberNum = PARTY[ptNum].getMemberNum()
    pcNumInParty++
    if (pcNumInParty >= memberNum) {
      pcNumInParty = 0
    }
    return pcNumInParty
  }
  function setItemCreatePC (pcNum) {
    let strAry = GameData['PC_CREATE_ITEM'].split(/<br>|\r\n|\n|\r/)
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].indexOf('<>') == -1) {
        continue
      }
      let strAry2 = strAry[i].split('<>')
      let formula = replaceFormula(strAry2[0], [['pc', pcNum]])
      if (strCalculation(formula) == 0) {
        continue
      }
      let itemStr, equip
      if (strAry2.length < 2) {
        itemStr = ''
      } else {
        itemStr = strAry2[1]
      }
      if (strAry2.length < 3) {
        equip = false
      } else if (strAry2[2] == 'true') {
        equip = true
      } else {
        equip = false
      }
      let strAry3 = itemStr.split(',')
      let count = 0
      for (let j = 0; j < strAry3.length; j++) {
        if (strAry3[j] == '') {
          continue
        }
        let item = Number(strAry3[j])
        if (item >= ITEM.length) {
          continue
        }
        PC[pcNum].putItem(item, true)
        PlayData['ItemFlag'][item] = true
        if (equip) {
          setPcEquip(pcNum, item, count)
        }
        count++
        if (count >= PC[pcNum].ItemMaxNum) {
          break
        }
      }
      break
    }
    PC[pcNum].check()
  }
  function templeCost (pcNum) {
    let result = -1
    let formula = ''
    let state = PC[pcNum].State
    if (state == 2) {
      formula = GameData['TEMPLE_PARALYZE']
    } else if (state == 3) {
      formula = GameData['TEMPLE_STONE']
    } else if (state == 4) {
      formula = GameData['TEMPLE_DEAD']
    } else if (state == 5) {
      formula = GameData['TEMPLE_ASH']
    }
    if (formula != '') {
      formula = replaceFormula(formula, [['pc', pcNum]])
      result = Math.ceil(strCalculation(formula))
    }
    return result
  }
}
