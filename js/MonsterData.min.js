class MonsterData {
  constructor (data) {
    this.NAME = new Array()
    this.NAME[1] = data[0]
    if (data[2] == '') {
      this.NAME[0] = data[0]
    } else {
      this.NAME[0] = data[2]
    }
    this.NAMES = new Array()
    if (data[1] == '') {
      this.NAMES[1] = data[0]
    } else {
      this.NAMES[1] = data[1]
    }
    if (data[3] == '') {
      if (data[2] == '') {
        this.NAMES[0] = data[0]
      } else {
        this.NAMES[0] = data[2]
      }
    } else {
      this.NAMES[0] = data[3]
    }
    this.TYPE = Number(data[4])
    this.LEVEL = data[5]
    this.HP_MAX = data[6]
    this.MP_MAX = data[7]
    this.AC = data[8]
    let strAry = data[9].split(',')
    this.ABILITY = new Array()
    for (let i = 0; i < GameData['ABILITY'].length; i++) {
      if (i >= strAry.length) {
        this.ABILITY.push(Number(strAry[0]))
      } else {
        this.ABILITY.push(Number(strAry[i]))
      }
    }
    strAry = data[10].split(',')
    this.RANGE = new Array()
    this.RANGE.push(Number(strAry[0]))
    this.RANGE.push(Number(strAry[1]))
    this.DMG = data[11]
    this.AT = data[12]
    this.ATTACK_ADD = data[13]
    this.POISON = Number(data[14])
    this.DRAIN = Number(data[15])
    this.BREATH = Number(data[16])
    this.BREATH_RANGE = Number(data[43])
    this.SPELL = new Array()
    strAry = data[17].split(',')
    for (let i = 0; i < GameData['SPELL_KIND'] + 1; i++) {
      if (i >= strAry.length) {
        this.SPELL[i] = 0
      } else {
        this.SPELL[i] = Number(strAry[i])
      }
      if (this.SPELL[i] > GameData['SPELL_LVMAX']) {
        this.SPELL[i] = GameData['SPELL_LVMAX']
      }
    }
    this.HEALING = Number(data[18])
    this.RESIST = data[19]
    this.WEAK_POINT = data[21]
    this.SPELL_CANCEL = Number(data[20])
    this.RUN = parseStrToBoolean(data[22])
    this.CALL = parseStrToBoolean(data[23])
    this.FRIENDSHIP = Number(data[24])
    this.ENTER_NUM = data[25]
    strAry = data[26].split('<>')
    this.FOLLOWER = strAry[0]
    if (strAry.length < 2) {
      this.FOLLOWER_RATE = 50
    } else {
      this.FOLLOWER_RATE = Number(strAry[1])
    }
    this.EXP = data[27]
    this.ACTION_PATTERN = data[28]
    this.HAVE_ITEM = data[29]
    this.ATTACK_KIND = data[30]
    this.CG = new Array()
    if (data[31] == '') {
      this.CG[0] = ''
      this.CG[1] = ''
    } else {
      strAry = data[31].split('<>')
      this.CG[0] = strAry[0]
      if (strAry.length < 2) {
        this.CG[1] = strAry[0]
      } else {
        this.CG[1] = strAry[1]
      }
    }
    this.ConfirmedCG = ['', '']
    this.INVINCIBILITY = parseStrToBoolean(data[32])
    this.TWICE_ATTACKS = parseStrToBoolean(data[33])
    this.BATTLE_FIGHT = new Array()
    strAry = data[34].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_FIGHT.push('')
      } else {
        this.BATTLE_FIGHT.push(strAry[i])
      }
    }
    this.BATTLE_BREATH = new Array()
    strAry = data[35].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_BREATH.push('')
      } else {
        this.BATTLE_BREATH.push(strAry[i])
      }
    }
    this.BATTLE_PARRY = new Array()
    strAry = data[36].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_PARRY.push('')
      } else {
        this.BATTLE_PARRY.push(strAry[i])
      }
    }
    this.BATTLE_RUN = new Array()
    strAry = data[37].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_RUN.push('')
      } else {
        this.BATTLE_RUN.push(strAry[i])
      }
    }
    this.BATTLE_SPELL_NUM = new Array()
    this.BATTLE_SPELL = new Array()
    strAry = data[38].split('<br>')
    for (let i = 0; i < strAry.length; i++) {
      strAry[i] = strAry[i].replace(/<\->/g, '<br>')
      let strAry2 = strAry[i].split('<+>')
      let str = ''
      let strAry3 = strAry2[0].split(',')
      for (let j = 0; j < strAry3.length; j++) {
        if (j > 0) {
          str += ','
        }
        if (strAry3[j].indexOf('-') > -1) {
          let strAry4 = strAry3[j].split('-')
          for (let k = 0; k < 2; k++) {
            if (k > 0) {
              str += '-'
            }
            if (Number(strAry4[k]) > 495) {
              str += '495'
            } else {
              str += strAry4[k]
            }
          }
        } else if (Number(strAry3[j]) > 495) {
          str += '495'
        } else {
          str += strAry3[j]
        }
      }
      this.BATTLE_SPELL_NUM[i] = str
      if (strAry2.length < 2) {
        this.BATTLE_SPELL[i] = ''
        continue
      }
      str = ''
      for (let j = 1; j < strAry2.length; j++) {
        if (j > 1) {
          str += '<>'
        }
        if (strAry2[j].replace(/<br>|[ 　]/g, '') == '') {
          str += ' '
        } else {
          str += strAry2[j]
        }
      }
      this.BATTLE_SPELL[i] = str
    }
    if (data[39].match(/^(| )$/)) {
      this.COMMENT = ''
    } else {
      this.COMMENT = MP.strChangeLine(data[39], 54, 6)
    }
    this.MUSIC_FLAG = parseStrToBoolean(data[40])
    this.MUSIC = data[41]
    this.NOT_DISPLAYED = parseStrToBoolean(data[42])
    this.BOX_NOT = parseStrToBoolean(data[44])
    this.ITEM_DROP = Number(data[45])
    if (parseStrToBoolean(data[46])) {
      this.GOLD = data[47]
    } else {
      this.GOLD = ''
    }
    if (parseStrToBoolean(data[48])) {
      this.TRAP = data[49]
    } else {
      this.TRAP = ''
    }
    this.BATTLE_CALL = new Array()
    strAry = data[50].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_CALL.push('')
      } else {
        this.BATTLE_CALL.push(strAry[i])
      }
    }
    this.HP_DRAIN = parseStrToBoolean(data[51])
  }
}
