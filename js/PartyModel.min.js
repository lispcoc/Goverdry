class PartyModel {
  constructor (partyNum) {
    this.PARTY_NUM = partyNum
    this.initialize()
  }
  addMember (pcNum) {
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        this.PartyMember[i] = pcNum
        PC[pcNum].PartyNum = this.PARTY_NUM
        break
      }
    }
  }
  averageLevel (type) {
    if (type == undefined || type == null) {
      type = 0
    }
    let lv = 0,
      count = 0
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      let pc = PC[pcNum]
      let ck = false
      if (type == 1) {
        if (pc.State < 4) {
          ck = true
        }
      } else if (type == 2) {
        if (pc.State == 0 && pc.Asleep == 0) {
          ck = true
        }
      } else {
        ck = true
      }
      if (ck) {
        lv += pc.Level
        count++
      }
    }
    if (count > 0) {
      return Math.floor(lv / count)
    } else {
      return 0
    }
  }
  battleActionReset () {
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      PC[this.PartyMember[i]].battleActionReset()
    }
  }
  battleReset () {
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      PC[this.PartyMember[i]].battleReset()
    }
  }
  boxItem () {
    let result = -1
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pc = PC[this.PartyMember[i]]
      if (pc.boxItem() > 0) {
        result = i
        break
      }
    }
    return result
  }
  boxSpell () {
    let result = -1
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pc = PC[this.PartyMember[i]]
      if (pc.boxSpell() > -1) {
        result = i
        break
      }
    }
    return result
  }
  boxTrap (formula, trapLv) {
    formula = formula.replace(/trap\.lv/g, String(trapLv))
    let stack = []
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      let pc = PC[pcNum]
      if (pc.possibleToAction()) {
        let formula2 = replaceFormula(formula, [['pc', pcNum]])
        let prob = Math.floor(strCalculation(formula2))
        if (prob > 100) {
          prob = 100
        } else if (prob < 0) {
          prob = 0
        }
        stack.push({ member: i, num: prob })
      }
    }
    stack.sort(compare)
    return stack[0].member
    function compare (a, b) {
      let comparison = 0
      if (a.num > b.num) {
        comparison = 1
      } else if (a.num < b.num) {
        comparison = -1
      }
      return comparison * -1
    }
  }
  check () {
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      PC[this.PartyMember[i]].check()
    }
  }
  checkAlignment () {
    let result = 1
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      let ali = PC[this.PartyMember[i]].Alignment
      if (ali == 0) {
        if (result == 1) {
          result = 0
        } else if (result == 2) {
          result = 3
        }
      } else if (ali == 2) {
        if (result == 0) {
          result = 3
        } else if (result == 1) {
          result = 2
        }
      }
    }
    return result
  }
  checkAnnihilate () {
    let result = true
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      let pc = PC[pcNum]
      if (pc.State < 2) {
        result = false
        break
      }
    }
    return result
  }
  checkBackRank (deadOk) {
    if (deadOk == undefined || deadOk == null) {
      deadOk = false
    }
    let memberNum = this.getMemberNum()
    for (let i = GameData['FRONT_RANK_NUM']; i < memberNum; i++) {
      if (deadOk) {
        return true
      } else {
        let pc = PC[this.PartyMember[i]]
        if (pc.State < 4) {
          return true
        }
      }
    }
    return false
  }
  checkSpellEffectEnd (mode) {
    let checkFlag = false
    for (let i = 0; i < 9; i++) {
      if (this.SpellEffectPlus[i] != 0) {
        let count = this.SpellEffectRate[i]
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            this.SpellEffectRate[i]--
          } else if (count < 0 && count >= -1000) {
            this.SpellEffectRate[i]++
          }
          if (this.SpellEffectRate[i] == 0) {
            this.SpellEffectPlus[i] = 0
            checkFlag = true
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            this.SpellEffectRate[i] = 0
            this.SpellEffectPlus[i] = 0
            checkFlag = true
          }
        }
      }
    }
    for (let i = 0; i < this.AbiPlus.length; i++) {
      if (this.AbiPlus[i] != 0) {
        let count = this.AbiRate[i]
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            this.AbiRate[i]--
          } else if (count < 0 && count >= -1000) {
            this.AbiRate[i]++
          }
          if (this.AbiRate[i] == 0) {
            this.AbiPlus[i] = 0
            checkFlag = true
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            this.AbiRate[i] = 0
            this.AbiPlus[i] = 0
            checkFlag = true
          }
        }
      }
    }
    for (let i = 0; i < this.ResistPlus.length; i++) {
      if (this.ResistPlus[i] != -2) {
        let count = this.ResistRate[i]
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            this.ResistRate[i]--
          } else if (count < 0 && count >= -1000) {
            this.ResistRate[i]++
          }
          if (this.ResistRate[i] == 0) {
            this.ResistPlus[i] = -2
            checkFlag = true
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            this.ResistRate[i] = 0
            this.ResistPlus[i] = -2
            checkFlag = true
          }
        }
      }
    }
    for (let i = 0; i < this.AttackAddPlus.length; i++) {
      if (this.AttackAddPlus[i]) {
        let count = this.AttackAddRate[i]
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            this.AttackAddRate[i]--
          } else if (count < 0 && count >= -1000) {
            this.AttackAddRate[i]++
          }
          if (this.AttackAddRate[i] == 0) {
            this.AttackAddPlus[i] = false
            checkFlag = true
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            this.AttackAddRate[i] = 0
            this.AttackAddPlus[i] = false
            checkFlag = true
          }
        }
      }
    }
    for (let i = 0; i < 5; i++) {
      if (this.PtSpellEffectPlus[i] != 0) {
        let count = this.PtSpellEffectRate[i]
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            this.PtSpellEffectRate[i]--
          } else if (count < 0 && count >= -1000) {
            this.PtSpellEffectRate[i]++
          }
          if (this.PtSpellEffectRate[i] == 0) {
            this.PtSpellEffectPlus[i] = 0
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            this.PtSpellEffectRate[i] = 0
            this.PtSpellEffectPlus[i] = 0
          }
        }
      }
    }
    if (this.Light) {
      let count = this.Vision
      if (mode == 'walk') {
        if (count > 0 && count <= 1000) {
          this.Vision--
        } else if (count < 0 && count >= -1000) {
          this.Vision++
        }
        if (this.Vision == 0) {
          this.Light = false
          this.ViewDarkZone = false
        }
      } else if (mode.match(/^(floor|darkzone)$/)) {
        if (
          (mode == 'floor' && (count == 1001 || count == -1001)) ||
          (mode == 'darkzone' && count > 0)
        ) {
          this.Vision = 0
          this.Light = false
          this.ViewDarkZone = false
        }
      }
    }
    if (!this.FlyingEffect.match(/^(| )$/)) {
      let count = this.Flying
      if (mode == 'walk') {
        if (count > 0 && count <= 1000) {
          this.Flying--
        } else if (count < 0 && count >= -1000) {
          this.Flying++
        }
        if (this.Flying == 0) {
          this.FlyingEffect = ''
        }
      } else if (mode.match(/^(floor|darkzone)$/)) {
        if (
          (mode == 'floor' && (count == 1001 || count == -1001)) ||
          (mode == 'darkzone' && count > 0)
        ) {
          this.Flying = 0
          this.FlyingEffect = ''
        }
      }
    }
    if (mode == 'floor' && this.DungeonMusic != '') {
      if (this.DungeonMusic.charAt(0) == '1') {
        this.DungeonMusic = ''
        musicPlay(DUNGEON.getDungeonMusic())
      }
    }
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      let pc = PC[pcNum]
      for (let j = 0; j < 9; j++) {
        if (pc.SpellEffectPlus[j] != 0) {
          let count = pc.SpellEffectRate[j]
          if (mode == 'walk') {
            if (count > 0 && count <= 1000) {
              pc.SpellEffectRate[j]--
            } else if (count < 0 && count >= -1000) {
              pc.SpellEffectRate[j]++
            }
            if (pc.SpellEffectRate[j] == 0) {
              pc.SpellEffectPlus[j] = 0
              checkFlag = true
            }
          } else if (mode.match(/^(floor|darkzone)$/)) {
            if (
              (mode == 'floor' && (count == 1001 || count == -1001)) ||
              (mode == 'darkzone' && count > 0)
            ) {
              pc.SpellEffectRate[j] = 0
              pc.SpellEffectPlus[j] = 0
              checkFlag = true
            }
          }
        }
      }
      if (pc.SealSpell) {
        let count = pc.SealSpellInt
        if (mode == 'walk') {
          if (count > 0 && count <= 1000) {
            pc.SealSpellInt--
          } else if (count < 0 && count >= -1000) {
            pc.SealSpellInt++
          }
          if (pc.SealSpellInt == 0) {
            pc.SealSpell = false
            checkFlag = true
          }
        } else if (mode.match(/^(floor|darkzone)$/)) {
          if (
            (mode == 'floor' && (count == 1001 || count == -1001)) ||
            (mode == 'darkzone' && count > 0)
          ) {
            pc.SealSpellInt = 0
            pc.SealSpell = false
            checkFlag = true
          }
        }
      }
      for (let j = 0; j < pc.AbiPlus.length; j++) {
        if (pc.AbiPlus[j] != 0) {
          let count = pc.AbiRate[j]
          if (mode == 'walk') {
            if (count > 0 && count <= 1000) {
              pc.AbiRate[j]--
            } else if (count < 0 && count >= -1000) {
              pc.AbiRate[j]++
            }
            if (pc.AbiRate[j] == 0) {
              pc.AbiPlus[j] = 0
              checkFlag = true
            }
          } else if (mode.match(/^(floor|darkzone)$/)) {
            if (
              (mode == 'floor' && (count == 1001 || count == -1001)) ||
              (mode == 'darkzone' && count > 0)
            ) {
              pc.AbiRate[j] = 0
              pc.AbiPlus[j] = 0
              checkFlag = true
            }
          }
        }
      }
      for (let j = 0; j < pc.ResistPlus.length; j++) {
        if (pc.ResistPlus[j] != -2) {
          let count = pc.ResistRate[j]
          if (mode == 'walk') {
            if (count > 0 && count <= 1000) {
              pc.ResistRate[j]--
            } else if (count < 0 && count >= -1000) {
              pc.ResistRate[j]++
            }
            if (pc.ResistRate[j] == 0) {
              pc.ResistPlus[j] = -2
              checkFlag = true
            }
          } else if (mode.match(/^(floor|darkzone)$/)) {
            if (
              (mode == 'floor' && (count == 1001 || count == -1001)) ||
              (mode == 'darkzone' && count > 0)
            ) {
              pc.ResistRate[j] = 0
              pc.ResistPlus[j] = -2
              checkFlag = true
            }
          }
        }
      }
      for (let j = 0; j < pc.AttackAddPlus.length; j++) {
        if (pc.AttackAddPlus[j]) {
          let count = pc.AttackAddRate[j]
          if (mode == 'walk') {
            if (count > 0 && count <= 1000) {
              pc.AttackAddRate[j]--
            } else if (count < 0 && count >= -1000) {
              pc.AttackAddRate[j]++
            }
            if (pc.AttackAddRate[j] == 0) {
              if (j == pc.AttackAddPlus.length - 1) {
                pc.PoisonPlus = 0
              }
              pc.AttackAddPlus[j] = false
              checkFlag = true
            }
          } else if (mode.match(/^(floor|darkzone)$/)) {
            if (
              (mode == 'floor' && (count == 1001 || count == -1001)) ||
              (mode == 'darkzone' && count > 0)
            ) {
              if (j == pc.AttackAddPlus.length - 1) {
                pc.PoisonPlus = 0
              }
              pc.AttackAddRate[j] = 0
              pc.AttackAddPlus[j] = false
              checkFlag = true
            }
          }
        }
      }
    }
    if (checkFlag) {
      this.check()
    }
  }
  deleteLostPc () {
    let count = 0
    let memberNum = this.getMemberNum()
    while (count < memberNum) {
      let pcNum = this.PartyMember[count]
      if (PC[pcNum].State == 6) {
        deletePc(pcNum)
        memberNum--
      } else {
        count++
      }
    }
  }
  dissolution (returnGround) {
    if (returnGround == undefined || returnGround == null) {
      returnGround = false
    }
    PlayData['ActiveParty'] = -1
    this.DungeonNumber = -1
    this.DungeonMusic = ''
    if (returnGround) {
      let loop = this.getMemberNum()
      for (let i = 0; i < loop; i++) {
        let pc = PC[this.PartyMember[i]]
        pc.Poison = 0
        pc.SealSpell = false
        pc.SealSpellInt = 0
        pcRecoveryOnReturn(pc)
      }
      this.spellEffectClear(true)
      this.deleteLostPc()
    }
    while (this.PartyMember[0] > -1) {
      this.removeMember(this.PartyMember[0])
    }
    if (!returnGround) {
      this.spellEffectClear(true)
    }
  }
  divvyGold () {
    let memberNum = this.getMemberNum()
    let gold = 0
    for (let i = 0; i < memberNum; i++) {
      gold += PC[this.PartyMember[i]].Gold
    }
    let remainder = gold % memberNum
    gold = Math.floor(gold / memberNum)
    for (let i = 0; i < memberNum; i++) {
      PC[this.PartyMember[i]].Gold = gold
    }
    for (let i = 0; i < remainder; i++) {
      PC[this.PartyMember[i]].Gold++
    }
  }
  frontRankCheck (n) {
    if (n < GameData['FRONT_RANK_NUM']) {
      return true
    } else {
      return false
    }
  }
  getDoorsProb (mode, trapLv) {
    let resultAry = []
    let formula
    if (mode == 1) {
      formula = GameData['FIND_DOOR_PROB'][1]
    } else if (mode == 2) {
      formula = GameData['PICK_DOOR_PROB']
    } else {
      formula = GameData['FIND_DOOR_PROB'][0]
    }
    formula = formula.replace(/trap\.lv/g, String(trapLv))
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      if (PC[pcNum].State == 0) {
        resultAry.push(
          Math.floor(strCalculation(replaceFormula(formula, [['pc', pcNum]])))
        )
      } else {
        resultAry.push(0)
      }
    }
    resultAry.sort(function (a, b) {
      return b - a
    })
    return resultAry[0]
  }
  getHighProbPc (probStr, trapLv) {
    probStr = probStr.replace(/trap\.lv/g, String(trapLv))
    let probAry = []
    let memberNum = this.getMemberNum()
    let num = memberNum - 1
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      let prob = 0
      if (PC[pcNum].State == 0) {
        let formula = replaceFormula(probStr, [['pc', pcNum]])
        prob = Math.floor(strCalculation(formula))
        if (prob > 100) {
          prob = 100
        } else if (prob < 0) {
          prob = 0
        }
      }
      probAry.push(prob * 10 + num)
      num--
    }
    probAry.sort(function (a, b) {
      return b - a
    })
    for (let i = 0; i < probAry.length; i++) {
      num = probAry[i] % 10
      probAry[i] = memberNum - 1 - num
    }
    return probAry
  }
  getItemDecidedList (pcNum) {
    if (pcNum == undefined || pcNum == null) {
      pcNum = -1
    }
    let result = []
    if (pcNum > -1) {
      let itemNum = PC[pcNum].haveItemNum(-1)
      for (let i = 0; i < itemNum; i++) {
        if (PC[pcNum].ItemDecided[i] == 0 && PC[pcNum].Equip[i] != 2) {
          result.push(pcNum * 100 + i)
        }
      }
    }
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      if (this.PartyMember[i] == pcNum) {
        continue
      }
      let pcNum2 = this.PartyMember[i]
      let itemNum = PC[pcNum2].haveItemNum(-1)
      for (let j = 0; j < itemNum; j++) {
        if (
          PC[pcNum2].ItemDecided[j] == 0 &&
          ((GameData['IDENTIFY_NOT_CURSED'] && PC[pcNum2].Equip[j] != 2) ||
            PC[pcNum2].Equip[j] == 0)
        ) {
          result.push(pcNum2 * 100 + j)
        }
      }
    }
    return result
  }
  getItemSpaceNum () {
    let result = 0
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      result += PC[this.PartyMember[i]].getItemSpaceNum()
    }
    return result
  }
  getMemberAttackAdd (num, possible) {
    possible = checkNull(possible, false)
    let result = 0
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      if (possible && !PC[this.PartyMember[i]].possibleToAction()) {
        continue
      }
      if (PC[this.PartyMember[i]].checkAttackAdd(num)) {
        result++
      }
    }
    return result
  }
  getMemberNum (possibleToAction, state) {
    if (possibleToAction == undefined || possibleToAction == null) {
      possibleToAction = false
    }
    if (state == undefined || state == null) {
      state = -1
    }
    let result = 0
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      if (possibleToAction && !PC[this.PartyMember[i]].possibleToAction()) {
        continue
      }
      if (state > -1 && !PC[this.PartyMember[i]].checkState(state)) {
        continue
      }
      result++
    }
    return result
  }
  getMemberForPcNum (pcNum) {
    let result = -1
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] == pcNum) {
        result = i
        break
      }
    }
    return result
  }
  haveItemNum (item, equip) {
    let result = 0
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] < 0) {
        break
      }
      result += PC[this.PartyMember[i]].haveItemNum(item, equip)
    }
    return result
  }
  healingEffect (battle) {
    if (battle == undefined || battle == null) {
      battle = false
    }
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pcNum = this.PartyMember[i]
      PC[pcNum].healingEffect(battle)
    }
  }
  initialize () {
    this.PartyMember = []
    for (let i = 0; i < 6; i++) {
      this.PartyMember[i] = -1
    }
    ;(this.DungeonNumber = -1), (this.Floor = 0)
    ;(this.X = 0), (this.Y = 0), (this.Direction = 0)
    ;(this.PreX = 0), (this.PreY = 0)
    this.DungeonMusic = ''
    this.spellEffectClear(true)
  }
  poolGold (pcNum) {
    let num = this.getMemberForPcNum(pcNum)
    if (num < 0) {
      return
    }
    let memberNum = this.getMemberNum()
    let gold = 0
    for (let i = 0; i < memberNum; i++) {
      gold += PC[this.PartyMember[i]].Gold
      PC[this.PartyMember[i]].Gold = 0
    }
    PC[this.PartyMember[num]].Gold = gold
    PC[this.PartyMember[num]].check()
  }
  putItem (item, decided) {
    let result = -1
    if (GameData['ITEM_IS_GOT_IN_TURN']) {
      for (let i = 0; i < this.PartyMember.length; i++) {
        if (this.PartyMember[i] < 0) {
          break
        }
        if (PC[this.PartyMember[i]].putItem(item, decided) > -1) {
          result = i
          break
        }
      }
    } else {
      let stack = []
      for (let i = 0; i < this.PartyMember.length; i++) {
        if (this.PartyMember[i] < 0) {
          break
        }
        if (PC[this.PartyMember[i]].getItemSpaceNum() > 0) {
          stack.push(i)
        }
      }
      if (stack.length > 0) {
        result = stack[dice(1, stack.length) - 1]
        PC[this.PartyMember[result]].putItem(item, decided)
      }
    }
    return result
  }
  removeItem (itemNum, equip, excludePcNum) {
    if (equip == undefined || equip == null) {
      equip = 2
    }
    if (excludePcNum == undefined || excludePcNum == null) {
      excludePcNum = -1
    }
    let result = false
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      if (this.PartyMember[i] == excludePcNum) {
        continue
      }
      if (PC[this.PartyMember[i]].removeItem(itemNum, equip) > -1) {
        result = true
        break
      }
    }
    return result
  }
  removeMember (pcNum) {
    for (let i = 0; i < this.PartyMember.length; i++) {
      if (this.PartyMember[i] == pcNum) {
        this.PartyMember[i] = -1
        PC[pcNum].PartyNum = -1
        for (let j = i; j < this.PartyMember.length - 1; j++) {
          this.PartyMember[j] = this.PartyMember[j + 1]
        }
        this.PartyMember[this.PartyMember.length - 1] = -1
        break
      }
    }
    if (this.PartyMember[0] < 0) {
      this.DungeonNumber = -1
      this.DungeonMusic = ''
      this.spellEffectClear(true)
    }
  }
  returnGround () {
    deleteTempVariable()
    this.DungeonNumber = -1
    this.DungeonMusic = ''
    this.spellEffectClear(true)
    let memberNum = this.getMemberNum()
    for (let i = 0; i < memberNum; i++) {
      let pc = PC[this.PartyMember[i]]
      pc.Poison = 0
      pc.SealSpell = false
      pc.SealSpellInt = 0
      pcRecoveryOnReturn(pc)
      pc.check()
    }
    this.deleteLostPc()
    let count = 0
    memberNum = this.getMemberNum()
    while (count < memberNum) {
      let pcNum = this.PartyMember[count]
      if (PC[pcNum].State > 1) {
        this.removeMember(pcNum)
        memberNum--
      } else {
        count++
      }
    }
    saveData()
    GameMode = ''
    GameState = 'castleTownStart'
    townAction()
    return
  }
  spellEffectClear (full) {
    ;(this.SpellEffectRate = []), (this.SpellEffectPlus = [])
    for (let i = 0; i < 9; i++) {
      ;(this.SpellEffectRate[i] = 0), (this.SpellEffectPlus[i] = 0)
    }
    ;(this.PtSpellEffectRate = []), (this.PtSpellEffectPlus = [])
    for (let i = 0; i < 5; i++) {
      ;(this.PtSpellEffectRate[i] = 0), (this.PtSpellEffectPlus[i] = 0)
    }
    this.Vision = 0
    this.Light = false
    this.ViewDarkZone = false
    ;(this.Flying = 0), (this.FlyingEffect = '')
    ;(this.AbiPlus = []), (this.AbiRate = [])
    for (let i = 0; i < 36; i++) {
      ;(this.AbiPlus[i] = 0), (this.AbiRate[i] = 0)
    }
    ;(this.ResistPlus = []), (this.ResistRate = [])
    for (let i = 0; i < RESIST_LENGTH; i++) {
      ;(this.ResistPlus[i] = -2), (this.ResistRate[i] = 0)
    }
    ;(this.AttackAddPlus = []), (this.AttackAddRate = [])
    for (let i = 0; i < ATTACK_ADD_LENGTH + 1; i++) {
      ;(this.AttackAddPlus[i] = false), (this.AttackAddRate[i] = 0)
    }
    this.PoisonPlus = 0
    if (this.PARTY_NUM > -1) {
      for (let i = 0; i < this.PartyMember.length; i++) {
        if (this.PartyMember[i] > -1) {
          PC[this.PartyMember[i]].spellEffectClear(full)
        }
      }
      this.check()
    }
  }
}
