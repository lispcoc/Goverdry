class ItemData {
  constructor (data) {
    this.ITEM_NUM = Number(data[0])
    this.NAME = [data[2], data[1]]
    this.TYPE = Number(data[3])
    this.WEAPON_TYPE = Number(data[4])
    this.PRICE = Number(data[5])
    data[6] = Number(data[6])
    if (data[6] < -1) {
      this.STOCK_OK = false
      this.FIRST_STOCK = 0
    } else {
      this.STOCK_OK = true
      if (data[6] < 0) {
        this.FIRST_STOCK = 120
      } else {
        this.FIRST_STOCK = data[6]
      }
    }
    this.Stock
    this.setStock()
    if (data[7] == '') {
      data[7] = '-,-'
    }
    let strAry = data[7].split(',')
    this.EQUIP_REQ_CLASS = strAry[0]
    this.EQUIP_REQ_RACE = strAry[1]
    if (data[8] == '') {
      data[8] = '-,-'
    }
    strAry = data[8].split(',')
    this.CURSE_REQ_ALI = strAry[0]
    this.CURSE_REQ_SEX = strAry[1]
    if (data[9] == '') {
      if (this.TYPE == 0) {
        data[9] = '4,0'
      } else {
        data[9] = '0,0'
      }
    }
    strAry = data[9].split(',')
    this.RANGE = new Array()
    this.RANGE.push(Number(strAry[0]))
    this.RANGE.push(Number(strAry[1]))
    this.AC = Number(data[10])
    this.CURSE_AC = Number(data[11])
    this.DMG = data[12]
    this.HIT = Number(data[13])
    this.AT = Number(data[14])
    this.ATTACK_ADD = Number(data[15])
    this.POISON = Number(data[16])
    this.HEALING = Number(data[17])
    this.RESIST = data[18]
    this.SPELL_CANCEL = Number(data[19])
    this.ATTACK_EFFECT = data[20]
    this.DEFENSE_EFFECT = data[21]
    this.USE = data[22]
    this.USE_EQUIP = parseStrToBoolean(data[23])
    this.SP = data[24]
    this.BREAK_PROB = data[25]
    this.BROKEN_ITEM = Number(data[26])
    if (data[27].match(/^(| )$/)) {
      this.COMMENT = ''
    } else {
      this.COMMENT = MP.strChangeLine(data[27], 54, 5)
    }
    this.LV = Number(data[28])
    this.ATTACK_KIND = data[29]
    this.GROUP_AT_NUM = Number(data[30])
    this.SUBWEAPON_HALF = parseStrToBoolean(data[31])
    this.ITEM_EFFECT_EQUIP = parseStrToBoolean(data[32])
    this.ITEM_NOT_APPLIED = parseStrToBoolean(data[33])
    this.CLASS_ATTACK_ADD_EQUIP = parseStrToBoolean(data[34])
    this.CLASS_AC_EQUIP = parseStrToBoolean(data[35])
    this.ITEM_ABI = data[36]
    this.BATTLE_FIGHT = new Array()
    strAry = data[37].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.BATTLE_FIGHT.push('')
      } else {
        this.BATTLE_FIGHT.push(strAry[i])
      }
    }
    this.NOT_DISPLAYED = parseStrToBoolean(data[38])
    this.DECIDED = Number(data[39])
    this.USE_TEXT = new Array()
    strAry = data[40].split('<+>')
    for (let i = 0; i < strAry.length; i++) {
      if (strAry[i].replace(/<br>|[ 　]/g, '') == '') {
        this.USE_TEXT.push('')
      } else {
        this.USE_TEXT.push(strAry[i])
      }
    }
  }
  curseCheck (pcNum) {
    let result = true
    if (this.CURSE_REQ_ALI == '-' && this.CURSE_REQ_SEX == '-') {
      return false
    }
    let str1 = String(PC[pcNum].Alignment)
    let str2 = String(PC[pcNum].Sex)
    if (
      this.CURSE_REQ_ALI.indexOf(str1) < 0 &&
      this.CURSE_REQ_SEX.indexOf(str2) < 0
    ) {
      result = false
    }
    return result
  }
  equipCheck (pcNum) {
    if (this.EQUIP_REQ_CLASS == '-' || this.EQUIP_REQ_RACE == '-') {
      return false
    }
    let result = true
    let eqClass = PC[pcNum].PcClass.toString(36)
    let eqRace = PC[pcNum].Race.toString(36)
    if (
      this.EQUIP_REQ_CLASS.indexOf(eqClass) < 0 ||
      this.EQUIP_REQ_RACE.indexOf(eqRace) < 0
    ) {
      result = false
    }
    return result
  }
  getEquipComment () {
    if (this.EQUIP_REQ_CLASS == '-' || this.EQUIP_REQ_RACE == '-') {
      return ''
    }
    let classStack = []
    for (let i = 0; i < this.EQUIP_REQ_CLASS.length; i++) {
      classStack.push(parseInt(this.EQUIP_REQ_CLASS.charAt(i), 36))
    }
    let raceStack = []
    for (let i = 0; i < this.EQUIP_REQ_RACE.length; i++) {
      raceStack.push(parseInt(this.EQUIP_REQ_RACE.charAt(i), 36))
    }
    let result = ''
    for (let i = 0; i < 18; i++) {
      if (classStack.length <= i && raceStack.length <= i) {
        break
      }
      if (i > 0) {
        result += '<br>'
      }
      let str = ''
      if (classStack.length > i) {
        str = GameData['PC_CLASS_ABBR'][classStack[i]]
      }
      result += MP.strFitLength(str, 4)
      str = ''
      if (classStack.length > i + 18) {
        str = GameData['PC_CLASS_ABBR'][classStack[i + 18]]
      }
      result += ' ' + MP.strFitLength(str, 4)
      str = ''
      if (raceStack.length > i) {
        str = GameData['RACE_ABBR'][raceStack[i]]
      }
      result += '  ' + MP.strFitLength(str, 4)
      str = ''
      if (raceStack.length > i + 18) {
        str = GameData['RACE_ABBR'][raceStack[i + 18]]
      }
      result += ' ' + MP.strFitLength(str, 4)
    }
    return result
  }
  getName (decided, equip, pcNum) {
    if (
      decided == undefined ||
      decided == null ||
      (decided != 0 && decided != 1)
    ) {
      decided = 1
    }
    let resultName = this.NAME[decided]
    if (decided == 0) {
      resultName = '?' + resultName
    }
    let result = ''
    if (
      equip != undefined &&
      equip != null &&
      pcNum != undefined &&
      pcNum != null
    ) {
      if (this.EQUIP_REQ_CLASS != '-') {
        if (equip == 1 || equip == 3) {
          result = '*'
        } else if (equip == 2) {
          result = '-'
        } else if (!this.equipCheck(pcNum)) {
          result = '#'
        }
      }
      if (result == '') {
        result = ' '
      }
    }
    result += resultName
    return result
  }
  setStock (num, plus) {
    if (plus == undefined || plus == null) {
      plus = false
    }
    if (num == undefined || num == null) {
      this.Stock = this.FIRST_STOCK
    } else {
      if (plus) {
        num += this.Stock
      }
      if (num > 99) {
        this.Stock = 120
      } else if (num < 0) {
        this.Stock = 0
      } else {
        this.Stock = num
      }
    }
  }
}
